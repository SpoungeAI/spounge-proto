syntax = "proto3";

package nodus.v2;
option go_package = "github.com/spounge-ai/spounge-protos/gen/go/nodus/v2;nodusv2";

import "google/api/annotations.proto";
import "nodus/v2/nodes/execution.proto";
import "nodus/v2/mcp/connection.proto";

service NodusService {
  rpc ExecuteNode(nodus.v2.nodes.ExecuteNodeRequest) returns (nodus.v2.nodes.ExecuteNodeResponse) {
    option (google.api.http) = {
      post: "/v2/nodes:execute"
      body: "*"
    };
  }

  rpc ExecuteNodeStream(nodus.v2.nodes.ExecuteNodeRequest) returns (stream nodus.v2.nodes.ExecuteNodeResponse) {
    option (google.api.http) = {
      post: "/v2/nodes:executeStream"
      body: "*"
    };
  }

  rpc RegisterMCPServer(nodus.v2.mcp.RegisterMCPServerRequest) returns (nodus.v2.mcp.RegisterMCPServerResponse) {
    option (google.api.http) = {
      post: "/v2/mcp/servers:register"
      body: "*"
    };
  }

  rpc ListMCPServers(nodus.v2.mcp.ListMCPServersRequest) returns (nodus.v2.mcp.ListMCPServersResponse) {
    option (google.api.http) = {
      get: "/v2/mcp/servers"
    };
  }

  rpc QueryMCPTools(nodus.v2.mcp.QueryMCPToolsRequest) returns (nodus.v2.mcp.QueryMCPToolsResponse) {
    option (google.api.http) = {
      get: "/v2/mcp/tools"
    };
  }

  rpc CheckHealth(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/v2/health"
    };
  }
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}