// File: proto/api/v1/api_gateway_service.proto
// The public-facing API Gateway service that acts as a facade for internal services.
syntax = "proto3";

package api.v1;

import "auth/v1/auth_service.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "iam/v1/api_key.proto";
import "iam/v1/managed_secret.proto";
import "user/v1/user_service.proto";
import "workflow/v1/execution.proto";
import "workflow/v1/execution_service.proto";
import "workflow/v1/workflow.proto";
import "workflow/v1/workflow_service.proto";

option go_package = "github.com/spoungeai/spounge-protos/gen/go/api/v1;apiv1";

// APIGatewayService is the single entry point for all client-facing traffic.
// It authenticates requests and routes them to the appropriate internal service.
service APIGatewayService {
  // --- AuthService RPCs ---
  rpc Login(auth.v1.LoginRequest) returns (auth.v1.LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }
  rpc RefreshToken(auth.v1.RefreshTokenRequest) returns (auth.v1.RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
      body: "*"
    };
  }
  rpc Logout(google.protobuf.Empty) returns (auth.v1.LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }

  // --- UserService RPCs ---
  rpc GetUserProfile(google.protobuf.Empty) returns (user.v1.GetUserProfileResponse) {
    option (google.api.http) = {
      get: "/v1/user/profile"
    };
  }
  rpc UpdateUserProfile(user.v1.UpdateUserProfileRequest) returns (user.v1.UpdateUserProfileResponse) {
    option (google.api.http) = {
      patch: "/v1/user/profile"
      body: "*"
    };
  }

  // --- WorkflowService RPCs ---
  rpc CreateWorkflow(workflow.v1.CreateWorkflowRequest) returns (workflow.v1.CreateWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflows"
      body: "*"
    };
  }
  rpc GetWorkflow(workflow.v1.GetWorkflowRequest) returns (workflow.v1.GetWorkflowResponse) {
    option (google.api.http) = {
      get: "/v1/workflows/{workflow_id}"
    };
  }
  rpc ListWorkflows(workflow.v1.ListWorkflowsRequest) returns (workflow.v1.ListWorkflowsResponse) {
    option (google.api.http) = {
      get: "/v1/workflows"
    };
  }

  // --- ExecutionService RPCs ---
  rpc StartExecution(workflow.v1.StartExecutionRequest) returns (workflow.v1.StartExecutionResponse) {
    option (google.api.http) = {
      post: "/v1/workflows/{workflow_id}/execute"
      body: "*"
    };
  }
  rpc GetExecution(workflow.v1.GetExecutionRequest) returns (workflow.v1.GetExecutionResponse) {
    option (google.api.http) = {
      get: "/v1/executions/{execution_id}"
    };
  }

  // --- Composed RPCs ---
  rpc GetDashboard(GetDashboardRequest) returns (GetDashboardResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard"
    };
  }
}

message GetDashboardRequest {
  // User identity is inferred from the auth token.
}

message GetDashboardResponse {
  user.v1.UserProfile user_profile = 1;
  repeated workflow.v1.WorkflowConfig recent_workflows = 2;
  repeated workflow.v1.WorkflowExecution recent_executions = 3;
  repeated iam.v1.APIKey api_keys = 4;
  repeated iam.v1.ManagedSecret managed_secrets = 5;
}