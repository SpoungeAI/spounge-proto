syntax = "proto3";

package polykey.v1;

import "google/protobuf/struct.proto";
import "common/v1/common.proto";

option go_package = "github.com/spoungeai/spounge-proto/gen/go/polykey/v1;polykeyv1";

// PolykeyService defines the available RPC methods.
service PolykeyService {
  // ExecuteTool runs a tool with given parameters.
  rpc ExecuteTool(ExecuteToolRequest) returns (ExecuteToolResponse);

  // ExecuteToolStream runs a tool with streaming responses.
  rpc ExecuteToolStream(ExecuteToolStreamRequest) returns (stream ExecuteToolStreamResponse);
}

// ExecuteToolRequest contains the input parameters for ExecuteTool.
message ExecuteToolRequest {
  string tool_name = 1;
  google.protobuf.Struct parameters = 2;
  string user_id = 3;
  string workflow_run_id = 4;
  common.v1.Metadata metadata = 5;
}

// ExecuteToolResponse contains the output and status from ExecuteTool.
message ExecuteToolResponse {
  common.v1.Status status = 1;

  oneof output {
    string string_output = 2;
    google.protobuf.Struct struct_output = 3;
    common.v1.File file_output = 4;
  }

  common.v1.Metadata metadata = 5;
}

// ExecuteToolStreamRequest contains the input for streaming execution.
message ExecuteToolStreamRequest {
  string tool_name = 1;
  google.protobuf.Struct parameters = 2;
  string user_id = 3;
  string workflow_run_id = 4;
  common.v1.Metadata metadata = 5;
}

// ExecuteToolStreamResponse represents streamed output from the tool.
message ExecuteToolStreamResponse {
  common.v1.Status status = 1;

  oneof output {
    string string_output = 2;
    google.protobuf.Struct struct_output = 3;
    common.v1.File file_output = 4;
  }

  common.v1.Metadata metadata = 5;
}