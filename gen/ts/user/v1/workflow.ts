// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: user/v1/workflow.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EntityId, Pagination, Status } from "../../common/v1/common";
import { Struct } from "../../google/protobuf/struct";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "user.v1";

/** Smaller preview config used for listing overlays */
export interface OverlayPreview {
  id: string;
  userId: string;
  name: string;
  overlayType: string;
  previewImageUrl: string;
  keyTypes: string[];
  createdAt?: Date | undefined;
}

/** Full dynamic workflow config */
export interface WorkflowConfig {
  id: string;
  userId: string;
  baseOverlay?: OverlayPreview | undefined;
  apiConfigs?: { [key: string]: any } | undefined;
  createdAt?: Date | undefined;
}

export interface CreateOverlayRequest {
  config?: OverlayPreview | undefined;
}

export interface CreateWorkflowRequest {
  config?: WorkflowConfig | undefined;
}

export interface GetOverlayRequest {
  id?: EntityId | undefined;
}

export interface GetWorkflowRequest {
  id?: EntityId | undefined;
}

export interface DeleteOverlayRequest {
  id?: EntityId | undefined;
}

export interface DeleteWorkflowRequest {
  id?: EntityId | undefined;
}

export interface OverlayResponse {
  status?: Status | undefined;
  config?: OverlayPreview | undefined;
}

export interface WorkflowResponse {
  status?: Status | undefined;
  config?: WorkflowConfig | undefined;
}

export interface ListOverlaysRequest {
  userId: string;
  page: number;
  pageSize: number;
}

export interface ListOverlaysResponse {
  status?: Status | undefined;
  overlays: OverlayPreview[];
  pagination?: Pagination | undefined;
}

function createBaseOverlayPreview(): OverlayPreview {
  return { id: "", userId: "", name: "", overlayType: "", previewImageUrl: "", keyTypes: [], createdAt: undefined };
}

export const OverlayPreview: MessageFns<OverlayPreview> = {
  encode(message: OverlayPreview, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.overlayType !== "") {
      writer.uint32(34).string(message.overlayType);
    }
    if (message.previewImageUrl !== "") {
      writer.uint32(42).string(message.previewImageUrl);
    }
    for (const v of message.keyTypes) {
      writer.uint32(50).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverlayPreview {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverlayPreview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.overlayType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.previewImageUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.keyTypes.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverlayPreview {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      overlayType: isSet(object.overlayType) ? globalThis.String(object.overlayType) : "",
      previewImageUrl: isSet(object.previewImageUrl) ? globalThis.String(object.previewImageUrl) : "",
      keyTypes: globalThis.Array.isArray(object?.keyTypes) ? object.keyTypes.map((e: any) => globalThis.String(e)) : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: OverlayPreview): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.overlayType !== "") {
      obj.overlayType = message.overlayType;
    }
    if (message.previewImageUrl !== "") {
      obj.previewImageUrl = message.previewImageUrl;
    }
    if (message.keyTypes?.length) {
      obj.keyTypes = message.keyTypes;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverlayPreview>, I>>(base?: I): OverlayPreview {
    return OverlayPreview.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverlayPreview>, I>>(object: I): OverlayPreview {
    const message = createBaseOverlayPreview();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.overlayType = object.overlayType ?? "";
    message.previewImageUrl = object.previewImageUrl ?? "";
    message.keyTypes = object.keyTypes?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseWorkflowConfig(): WorkflowConfig {
  return { id: "", userId: "", baseOverlay: undefined, apiConfigs: undefined, createdAt: undefined };
}

export const WorkflowConfig: MessageFns<WorkflowConfig> = {
  encode(message: WorkflowConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.baseOverlay !== undefined) {
      OverlayPreview.encode(message.baseOverlay, writer.uint32(26).fork()).join();
    }
    if (message.apiConfigs !== undefined) {
      Struct.encode(Struct.wrap(message.apiConfigs), writer.uint32(34).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkflowConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.baseOverlay = OverlayPreview.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.apiConfigs = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkflowConfig {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      baseOverlay: isSet(object.baseOverlay) ? OverlayPreview.fromJSON(object.baseOverlay) : undefined,
      apiConfigs: isObject(object.apiConfigs) ? object.apiConfigs : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: WorkflowConfig): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.baseOverlay !== undefined) {
      obj.baseOverlay = OverlayPreview.toJSON(message.baseOverlay);
    }
    if (message.apiConfigs !== undefined) {
      obj.apiConfigs = message.apiConfigs;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkflowConfig>, I>>(base?: I): WorkflowConfig {
    return WorkflowConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkflowConfig>, I>>(object: I): WorkflowConfig {
    const message = createBaseWorkflowConfig();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.baseOverlay = (object.baseOverlay !== undefined && object.baseOverlay !== null)
      ? OverlayPreview.fromPartial(object.baseOverlay)
      : undefined;
    message.apiConfigs = object.apiConfigs ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseCreateOverlayRequest(): CreateOverlayRequest {
  return { config: undefined };
}

export const CreateOverlayRequest: MessageFns<CreateOverlayRequest> = {
  encode(message: CreateOverlayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      OverlayPreview.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOverlayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOverlayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = OverlayPreview.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOverlayRequest {
    return { config: isSet(object.config) ? OverlayPreview.fromJSON(object.config) : undefined };
  },

  toJSON(message: CreateOverlayRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = OverlayPreview.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOverlayRequest>, I>>(base?: I): CreateOverlayRequest {
    return CreateOverlayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOverlayRequest>, I>>(object: I): CreateOverlayRequest {
    const message = createBaseCreateOverlayRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? OverlayPreview.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseCreateWorkflowRequest(): CreateWorkflowRequest {
  return { config: undefined };
}

export const CreateWorkflowRequest: MessageFns<CreateWorkflowRequest> = {
  encode(message: CreateWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      WorkflowConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = WorkflowConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorkflowRequest {
    return { config: isSet(object.config) ? WorkflowConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: CreateWorkflowRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = WorkflowConfig.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWorkflowRequest>, I>>(base?: I): CreateWorkflowRequest {
    return CreateWorkflowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWorkflowRequest>, I>>(object: I): CreateWorkflowRequest {
    const message = createBaseCreateWorkflowRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? WorkflowConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseGetOverlayRequest(): GetOverlayRequest {
  return { id: undefined };
}

export const GetOverlayRequest: MessageFns<GetOverlayRequest> = {
  encode(message: GetOverlayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      EntityId.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOverlayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOverlayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = EntityId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOverlayRequest {
    return { id: isSet(object.id) ? EntityId.fromJSON(object.id) : undefined };
  },

  toJSON(message: GetOverlayRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = EntityId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOverlayRequest>, I>>(base?: I): GetOverlayRequest {
    return GetOverlayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOverlayRequest>, I>>(object: I): GetOverlayRequest {
    const message = createBaseGetOverlayRequest();
    message.id = (object.id !== undefined && object.id !== null) ? EntityId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseGetWorkflowRequest(): GetWorkflowRequest {
  return { id: undefined };
}

export const GetWorkflowRequest: MessageFns<GetWorkflowRequest> = {
  encode(message: GetWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      EntityId.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = EntityId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkflowRequest {
    return { id: isSet(object.id) ? EntityId.fromJSON(object.id) : undefined };
  },

  toJSON(message: GetWorkflowRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = EntityId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWorkflowRequest>, I>>(base?: I): GetWorkflowRequest {
    return GetWorkflowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWorkflowRequest>, I>>(object: I): GetWorkflowRequest {
    const message = createBaseGetWorkflowRequest();
    message.id = (object.id !== undefined && object.id !== null) ? EntityId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseDeleteOverlayRequest(): DeleteOverlayRequest {
  return { id: undefined };
}

export const DeleteOverlayRequest: MessageFns<DeleteOverlayRequest> = {
  encode(message: DeleteOverlayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      EntityId.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteOverlayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOverlayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = EntityId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteOverlayRequest {
    return { id: isSet(object.id) ? EntityId.fromJSON(object.id) : undefined };
  },

  toJSON(message: DeleteOverlayRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = EntityId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteOverlayRequest>, I>>(base?: I): DeleteOverlayRequest {
    return DeleteOverlayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteOverlayRequest>, I>>(object: I): DeleteOverlayRequest {
    const message = createBaseDeleteOverlayRequest();
    message.id = (object.id !== undefined && object.id !== null) ? EntityId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseDeleteWorkflowRequest(): DeleteWorkflowRequest {
  return { id: undefined };
}

export const DeleteWorkflowRequest: MessageFns<DeleteWorkflowRequest> = {
  encode(message: DeleteWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      EntityId.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = EntityId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWorkflowRequest {
    return { id: isSet(object.id) ? EntityId.fromJSON(object.id) : undefined };
  },

  toJSON(message: DeleteWorkflowRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = EntityId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteWorkflowRequest>, I>>(base?: I): DeleteWorkflowRequest {
    return DeleteWorkflowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteWorkflowRequest>, I>>(object: I): DeleteWorkflowRequest {
    const message = createBaseDeleteWorkflowRequest();
    message.id = (object.id !== undefined && object.id !== null) ? EntityId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseOverlayResponse(): OverlayResponse {
  return { status: undefined, config: undefined };
}

export const OverlayResponse: MessageFns<OverlayResponse> = {
  encode(message: OverlayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.config !== undefined) {
      OverlayPreview.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverlayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverlayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = OverlayPreview.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverlayResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      config: isSet(object.config) ? OverlayPreview.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: OverlayResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.config !== undefined) {
      obj.config = OverlayPreview.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverlayResponse>, I>>(base?: I): OverlayResponse {
    return OverlayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverlayResponse>, I>>(object: I): OverlayResponse {
    const message = createBaseOverlayResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? OverlayPreview.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseWorkflowResponse(): WorkflowResponse {
  return { status: undefined, config: undefined };
}

export const WorkflowResponse: MessageFns<WorkflowResponse> = {
  encode(message: WorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.config !== undefined) {
      WorkflowConfig.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = WorkflowConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkflowResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      config: isSet(object.config) ? WorkflowConfig.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: WorkflowResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.config !== undefined) {
      obj.config = WorkflowConfig.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkflowResponse>, I>>(base?: I): WorkflowResponse {
    return WorkflowResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkflowResponse>, I>>(object: I): WorkflowResponse {
    const message = createBaseWorkflowResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? WorkflowConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseListOverlaysRequest(): ListOverlaysRequest {
  return { userId: "", page: 0, pageSize: 0 };
}

export const ListOverlaysRequest: MessageFns<ListOverlaysRequest> = {
  encode(message: ListOverlaysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOverlaysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOverlaysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOverlaysRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListOverlaysRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOverlaysRequest>, I>>(base?: I): ListOverlaysRequest {
    return ListOverlaysRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOverlaysRequest>, I>>(object: I): ListOverlaysRequest {
    const message = createBaseListOverlaysRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListOverlaysResponse(): ListOverlaysResponse {
  return { status: undefined, overlays: [], pagination: undefined };
}

export const ListOverlaysResponse: MessageFns<ListOverlaysResponse> = {
  encode(message: ListOverlaysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.overlays) {
      OverlayPreview.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      Pagination.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOverlaysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOverlaysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.overlays.push(OverlayPreview.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = Pagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOverlaysResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      overlays: globalThis.Array.isArray(object?.overlays)
        ? object.overlays.map((e: any) => OverlayPreview.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? Pagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListOverlaysResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.overlays?.length) {
      obj.overlays = message.overlays.map((e) => OverlayPreview.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = Pagination.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOverlaysResponse>, I>>(base?: I): ListOverlaysResponse {
    return ListOverlaysResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOverlaysResponse>, I>>(object: I): ListOverlaysResponse {
    const message = createBaseListOverlaysResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.overlays = object.overlays?.map((e) => OverlayPreview.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? Pagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
