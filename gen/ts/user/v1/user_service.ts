// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: user/v1/user_service.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { APIKey, APIKeysResponse, CreateAPIKeyRequest, DeleteAPIKeyRequest, ListAPIKeysRequest } from "./api_key";
import { DeleteProfileRequest, GetProfileRequest, ProfileResponse, UpdateProfileRequest } from "./user";
import {
  CreateOverlayRequest,
  CreateWorkflowRequest,
  DeleteOverlayRequest,
  DeleteWorkflowRequest,
  GetOverlayRequest,
  GetWorkflowRequest,
  ListOverlaysRequest,
  ListOverlaysResponse,
  OverlayResponse,
  WorkflowResponse,
} from "./workflow";

export const protobufPackage = "user.v1";

/** Profile service methods */
export interface UserProfileService {
  GetProfile(request: GetProfileRequest): Promise<ProfileResponse>;
  UpdateProfile(request: UpdateProfileRequest): Promise<ProfileResponse>;
  DeleteProfile(request: DeleteProfileRequest): Promise<Empty>;
}

export const UserProfileServiceServiceName = "user.v1.UserProfileService";
export class UserProfileServiceClientImpl implements UserProfileService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserProfileServiceServiceName;
    this.rpc = rpc;
    this.GetProfile = this.GetProfile.bind(this);
    this.UpdateProfile = this.UpdateProfile.bind(this);
    this.DeleteProfile = this.DeleteProfile.bind(this);
  }
  GetProfile(request: GetProfileRequest): Promise<ProfileResponse> {
    const data = GetProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProfile", data);
    return promise.then((data) => ProfileResponse.decode(new BinaryReader(data)));
  }

  UpdateProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {
    const data = UpdateProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProfile", data);
    return promise.then((data) => ProfileResponse.decode(new BinaryReader(data)));
  }

  DeleteProfile(request: DeleteProfileRequest): Promise<Empty> {
    const data = DeleteProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProfile", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }
}

/** API key service methods */
export interface APIKeyService {
  CreateKey(request: CreateAPIKeyRequest): Promise<APIKey>;
  DeleteKey(request: DeleteAPIKeyRequest): Promise<Empty>;
  ListKeys(request: ListAPIKeysRequest): Promise<APIKeysResponse>;
}

export const APIKeyServiceServiceName = "user.v1.APIKeyService";
export class APIKeyServiceClientImpl implements APIKeyService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || APIKeyServiceServiceName;
    this.rpc = rpc;
    this.CreateKey = this.CreateKey.bind(this);
    this.DeleteKey = this.DeleteKey.bind(this);
    this.ListKeys = this.ListKeys.bind(this);
  }
  CreateKey(request: CreateAPIKeyRequest): Promise<APIKey> {
    const data = CreateAPIKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateKey", data);
    return promise.then((data) => APIKey.decode(new BinaryReader(data)));
  }

  DeleteKey(request: DeleteAPIKeyRequest): Promise<Empty> {
    const data = DeleteAPIKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteKey", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  ListKeys(request: ListAPIKeysRequest): Promise<APIKeysResponse> {
    const data = ListAPIKeysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListKeys", data);
    return promise.then((data) => APIKeysResponse.decode(new BinaryReader(data)));
  }
}

/** Workflow config service methods */
export interface ConfigService {
  CreateOverlay(request: CreateOverlayRequest): Promise<OverlayResponse>;
  GetOverlay(request: GetOverlayRequest): Promise<OverlayResponse>;
  ListOverlays(request: ListOverlaysRequest): Promise<ListOverlaysResponse>;
  DeleteOverlay(request: DeleteOverlayRequest): Promise<Empty>;
  CreateWorkflow(request: CreateWorkflowRequest): Promise<WorkflowResponse>;
  GetWorkflow(request: GetWorkflowRequest): Promise<WorkflowResponse>;
  DeleteWorkflow(request: DeleteWorkflowRequest): Promise<Empty>;
}

export const ConfigServiceServiceName = "user.v1.ConfigService";
export class ConfigServiceClientImpl implements ConfigService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ConfigServiceServiceName;
    this.rpc = rpc;
    this.CreateOverlay = this.CreateOverlay.bind(this);
    this.GetOverlay = this.GetOverlay.bind(this);
    this.ListOverlays = this.ListOverlays.bind(this);
    this.DeleteOverlay = this.DeleteOverlay.bind(this);
    this.CreateWorkflow = this.CreateWorkflow.bind(this);
    this.GetWorkflow = this.GetWorkflow.bind(this);
    this.DeleteWorkflow = this.DeleteWorkflow.bind(this);
  }
  CreateOverlay(request: CreateOverlayRequest): Promise<OverlayResponse> {
    const data = CreateOverlayRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOverlay", data);
    return promise.then((data) => OverlayResponse.decode(new BinaryReader(data)));
  }

  GetOverlay(request: GetOverlayRequest): Promise<OverlayResponse> {
    const data = GetOverlayRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOverlay", data);
    return promise.then((data) => OverlayResponse.decode(new BinaryReader(data)));
  }

  ListOverlays(request: ListOverlaysRequest): Promise<ListOverlaysResponse> {
    const data = ListOverlaysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListOverlays", data);
    return promise.then((data) => ListOverlaysResponse.decode(new BinaryReader(data)));
  }

  DeleteOverlay(request: DeleteOverlayRequest): Promise<Empty> {
    const data = DeleteOverlayRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteOverlay", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  CreateWorkflow(request: CreateWorkflowRequest): Promise<WorkflowResponse> {
    const data = CreateWorkflowRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateWorkflow", data);
    return promise.then((data) => WorkflowResponse.decode(new BinaryReader(data)));
  }

  GetWorkflow(request: GetWorkflowRequest): Promise<WorkflowResponse> {
    const data = GetWorkflowRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorkflow", data);
    return promise.then((data) => WorkflowResponse.decode(new BinaryReader(data)));
  }

  DeleteWorkflow(request: DeleteWorkflowRequest): Promise<Empty> {
    const data = DeleteWorkflowRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteWorkflow", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
