// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: polykey/v1/polykey.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { File, Metadata, Status } from "../../common/v1/common";
import { Struct } from "../../google/protobuf/struct";

export const protobufPackage = "polykey.v1";

/** ExecuteToolRequest contains the input parameters for ExecuteTool. */
export interface ExecuteToolRequest {
  toolName: string;
  parameters?: { [key: string]: any } | undefined;
  userId: string;
  workflowRunId: string;
  metadata?: Metadata | undefined;
}

/** ExecuteToolResponse contains the output and status from ExecuteTool. */
export interface ExecuteToolResponse {
  status?: Status | undefined;
  stringOutput?: string | undefined;
  structOutput?: { [key: string]: any } | undefined;
  fileOutput?: File | undefined;
  metadata?: Metadata | undefined;
}

/** ExecuteToolStreamRequest contains the input for streaming execution. */
export interface ExecuteToolStreamRequest {
  toolName: string;
  parameters?: { [key: string]: any } | undefined;
  userId: string;
  workflowRunId: string;
  metadata?: Metadata | undefined;
}

/** ExecuteToolStreamResponse represents streamed output from the tool. */
export interface ExecuteToolStreamResponse {
  status?: Status | undefined;
  stringOutput?: string | undefined;
  structOutput?: { [key: string]: any } | undefined;
  fileOutput?: File | undefined;
  metadata?: Metadata | undefined;
}

function createBaseExecuteToolRequest(): ExecuteToolRequest {
  return { toolName: "", parameters: undefined, userId: "", workflowRunId: "", metadata: undefined };
}

export const ExecuteToolRequest: MessageFns<ExecuteToolRequest> = {
  encode(message: ExecuteToolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toolName !== "") {
      writer.uint32(10).string(message.toolName);
    }
    if (message.parameters !== undefined) {
      Struct.encode(Struct.wrap(message.parameters), writer.uint32(18).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.workflowRunId !== "") {
      writer.uint32(34).string(message.workflowRunId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteToolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteToolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.toolName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.workflowRunId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteToolRequest {
    return {
      toolName: isSet(object.toolName) ? globalThis.String(object.toolName) : "",
      parameters: isObject(object.parameters) ? object.parameters : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      workflowRunId: isSet(object.workflowRunId) ? globalThis.String(object.workflowRunId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ExecuteToolRequest): unknown {
    const obj: any = {};
    if (message.toolName !== "") {
      obj.toolName = message.toolName;
    }
    if (message.parameters !== undefined) {
      obj.parameters = message.parameters;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.workflowRunId !== "") {
      obj.workflowRunId = message.workflowRunId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteToolRequest>, I>>(base?: I): ExecuteToolRequest {
    return ExecuteToolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteToolRequest>, I>>(object: I): ExecuteToolRequest {
    const message = createBaseExecuteToolRequest();
    message.toolName = object.toolName ?? "";
    message.parameters = object.parameters ?? undefined;
    message.userId = object.userId ?? "";
    message.workflowRunId = object.workflowRunId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseExecuteToolResponse(): ExecuteToolResponse {
  return {
    status: undefined,
    stringOutput: undefined,
    structOutput: undefined,
    fileOutput: undefined,
    metadata: undefined,
  };
}

export const ExecuteToolResponse: MessageFns<ExecuteToolResponse> = {
  encode(message: ExecuteToolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.stringOutput !== undefined) {
      writer.uint32(18).string(message.stringOutput);
    }
    if (message.structOutput !== undefined) {
      Struct.encode(Struct.wrap(message.structOutput), writer.uint32(26).fork()).join();
    }
    if (message.fileOutput !== undefined) {
      File.encode(message.fileOutput, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteToolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteToolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringOutput = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.structOutput = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileOutput = File.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteToolResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      stringOutput: isSet(object.stringOutput) ? globalThis.String(object.stringOutput) : undefined,
      structOutput: isObject(object.structOutput) ? object.structOutput : undefined,
      fileOutput: isSet(object.fileOutput) ? File.fromJSON(object.fileOutput) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ExecuteToolResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.stringOutput !== undefined) {
      obj.stringOutput = message.stringOutput;
    }
    if (message.structOutput !== undefined) {
      obj.structOutput = message.structOutput;
    }
    if (message.fileOutput !== undefined) {
      obj.fileOutput = File.toJSON(message.fileOutput);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteToolResponse>, I>>(base?: I): ExecuteToolResponse {
    return ExecuteToolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteToolResponse>, I>>(object: I): ExecuteToolResponse {
    const message = createBaseExecuteToolResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.stringOutput = object.stringOutput ?? undefined;
    message.structOutput = object.structOutput ?? undefined;
    message.fileOutput = (object.fileOutput !== undefined && object.fileOutput !== null)
      ? File.fromPartial(object.fileOutput)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseExecuteToolStreamRequest(): ExecuteToolStreamRequest {
  return { toolName: "", parameters: undefined, userId: "", workflowRunId: "", metadata: undefined };
}

export const ExecuteToolStreamRequest: MessageFns<ExecuteToolStreamRequest> = {
  encode(message: ExecuteToolStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toolName !== "") {
      writer.uint32(10).string(message.toolName);
    }
    if (message.parameters !== undefined) {
      Struct.encode(Struct.wrap(message.parameters), writer.uint32(18).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.workflowRunId !== "") {
      writer.uint32(34).string(message.workflowRunId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteToolStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteToolStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.toolName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.workflowRunId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteToolStreamRequest {
    return {
      toolName: isSet(object.toolName) ? globalThis.String(object.toolName) : "",
      parameters: isObject(object.parameters) ? object.parameters : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      workflowRunId: isSet(object.workflowRunId) ? globalThis.String(object.workflowRunId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ExecuteToolStreamRequest): unknown {
    const obj: any = {};
    if (message.toolName !== "") {
      obj.toolName = message.toolName;
    }
    if (message.parameters !== undefined) {
      obj.parameters = message.parameters;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.workflowRunId !== "") {
      obj.workflowRunId = message.workflowRunId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteToolStreamRequest>, I>>(base?: I): ExecuteToolStreamRequest {
    return ExecuteToolStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteToolStreamRequest>, I>>(object: I): ExecuteToolStreamRequest {
    const message = createBaseExecuteToolStreamRequest();
    message.toolName = object.toolName ?? "";
    message.parameters = object.parameters ?? undefined;
    message.userId = object.userId ?? "";
    message.workflowRunId = object.workflowRunId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseExecuteToolStreamResponse(): ExecuteToolStreamResponse {
  return {
    status: undefined,
    stringOutput: undefined,
    structOutput: undefined,
    fileOutput: undefined,
    metadata: undefined,
  };
}

export const ExecuteToolStreamResponse: MessageFns<ExecuteToolStreamResponse> = {
  encode(message: ExecuteToolStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.stringOutput !== undefined) {
      writer.uint32(18).string(message.stringOutput);
    }
    if (message.structOutput !== undefined) {
      Struct.encode(Struct.wrap(message.structOutput), writer.uint32(26).fork()).join();
    }
    if (message.fileOutput !== undefined) {
      File.encode(message.fileOutput, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteToolStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteToolStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringOutput = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.structOutput = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileOutput = File.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteToolStreamResponse {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      stringOutput: isSet(object.stringOutput) ? globalThis.String(object.stringOutput) : undefined,
      structOutput: isObject(object.structOutput) ? object.structOutput : undefined,
      fileOutput: isSet(object.fileOutput) ? File.fromJSON(object.fileOutput) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ExecuteToolStreamResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.stringOutput !== undefined) {
      obj.stringOutput = message.stringOutput;
    }
    if (message.structOutput !== undefined) {
      obj.structOutput = message.structOutput;
    }
    if (message.fileOutput !== undefined) {
      obj.fileOutput = File.toJSON(message.fileOutput);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteToolStreamResponse>, I>>(base?: I): ExecuteToolStreamResponse {
    return ExecuteToolStreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteToolStreamResponse>, I>>(object: I): ExecuteToolStreamResponse {
    const message = createBaseExecuteToolStreamResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.stringOutput = object.stringOutput ?? undefined;
    message.structOutput = object.structOutput ?? undefined;
    message.fileOutput = (object.fileOutput !== undefined && object.fileOutput !== null)
      ? File.fromPartial(object.fileOutput)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

/** PolykeyService defines the available RPC methods. */
export interface PolykeyService {
  /** ExecuteTool runs a tool with given parameters. */
  ExecuteTool(request: ExecuteToolRequest): Promise<ExecuteToolResponse>;
  /** ExecuteToolStream runs a tool with streaming responses. */
  ExecuteToolStream(request: ExecuteToolStreamRequest): Observable<ExecuteToolStreamResponse>;
}

export const PolykeyServiceServiceName = "polykey.v1.PolykeyService";
export class PolykeyServiceClientImpl implements PolykeyService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PolykeyServiceServiceName;
    this.rpc = rpc;
    this.ExecuteTool = this.ExecuteTool.bind(this);
    this.ExecuteToolStream = this.ExecuteToolStream.bind(this);
  }
  ExecuteTool(request: ExecuteToolRequest): Promise<ExecuteToolResponse> {
    const data = ExecuteToolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ExecuteTool", data);
    return promise.then((data) => ExecuteToolResponse.decode(new BinaryReader(data)));
  }

  ExecuteToolStream(request: ExecuteToolStreamRequest): Observable<ExecuteToolStreamResponse> {
    const data = ExecuteToolStreamRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "ExecuteToolStream", data);
    return result.pipe(map((data) => ExecuteToolStreamResponse.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
