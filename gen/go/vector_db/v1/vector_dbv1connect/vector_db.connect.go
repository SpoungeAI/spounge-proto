// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vector_db/v1/vector_db.proto

package vector_dbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/spounge-ai/spounge-proto/gen/go/vector_db/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VectorDBServiceName is the fully-qualified name of the VectorDBService service.
	VectorDBServiceName = "vector_db.v1.VectorDBService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VectorDBServiceUpsertProcedure is the fully-qualified name of the VectorDBService's Upsert RPC.
	VectorDBServiceUpsertProcedure = "/vector_db.v1.VectorDBService/Upsert"
	// VectorDBServiceQueryProcedure is the fully-qualified name of the VectorDBService's Query RPC.
	VectorDBServiceQueryProcedure = "/vector_db.v1.VectorDBService/Query"
)

// VectorDBServiceClient is a client for the vector_db.v1.VectorDBService service.
type VectorDBServiceClient interface {
	Upsert(context.Context, *connect.Request[v1.UpsertRequest]) (*connect.Response[v1.UpsertResponse], error)
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewVectorDBServiceClient constructs a client for the vector_db.v1.VectorDBService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVectorDBServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VectorDBServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vectorDBServiceMethods := v1.File_vector_db_v1_vector_db_proto.Services().ByName("VectorDBService").Methods()
	return &vectorDBServiceClient{
		upsert: connect.NewClient[v1.UpsertRequest, v1.UpsertResponse](
			httpClient,
			baseURL+VectorDBServiceUpsertProcedure,
			connect.WithSchema(vectorDBServiceMethods.ByName("Upsert")),
			connect.WithClientOptions(opts...),
		),
		query: connect.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+VectorDBServiceQueryProcedure,
			connect.WithSchema(vectorDBServiceMethods.ByName("Query")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vectorDBServiceClient implements VectorDBServiceClient.
type vectorDBServiceClient struct {
	upsert *connect.Client[v1.UpsertRequest, v1.UpsertResponse]
	query  *connect.Client[v1.QueryRequest, v1.QueryResponse]
}

// Upsert calls vector_db.v1.VectorDBService.Upsert.
func (c *vectorDBServiceClient) Upsert(ctx context.Context, req *connect.Request[v1.UpsertRequest]) (*connect.Response[v1.UpsertResponse], error) {
	return c.upsert.CallUnary(ctx, req)
}

// Query calls vector_db.v1.VectorDBService.Query.
func (c *vectorDBServiceClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// VectorDBServiceHandler is an implementation of the vector_db.v1.VectorDBService service.
type VectorDBServiceHandler interface {
	Upsert(context.Context, *connect.Request[v1.UpsertRequest]) (*connect.Response[v1.UpsertResponse], error)
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewVectorDBServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVectorDBServiceHandler(svc VectorDBServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vectorDBServiceMethods := v1.File_vector_db_v1_vector_db_proto.Services().ByName("VectorDBService").Methods()
	vectorDBServiceUpsertHandler := connect.NewUnaryHandler(
		VectorDBServiceUpsertProcedure,
		svc.Upsert,
		connect.WithSchema(vectorDBServiceMethods.ByName("Upsert")),
		connect.WithHandlerOptions(opts...),
	)
	vectorDBServiceQueryHandler := connect.NewUnaryHandler(
		VectorDBServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(vectorDBServiceMethods.ByName("Query")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vector_db.v1.VectorDBService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VectorDBServiceUpsertProcedure:
			vectorDBServiceUpsertHandler.ServeHTTP(w, r)
		case VectorDBServiceQueryProcedure:
			vectorDBServiceQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVectorDBServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVectorDBServiceHandler struct{}

func (UnimplementedVectorDBServiceHandler) Upsert(context.Context, *connect.Request[v1.UpsertRequest]) (*connect.Response[v1.UpsertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vector_db.v1.VectorDBService.Upsert is not implemented"))
}

func (UnimplementedVectorDBServiceHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vector_db.v1.VectorDBService.Query is not implemented"))
}
