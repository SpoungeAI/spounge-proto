// File: proto/user/v1/user_service.proto
// Defines the service for managing user profiles and their managed secrets.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user_service.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "spounge-proto-gen/user/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUserProfileProcedure is the fully-qualified name of the UserService's
	// GetUserProfile RPC.
	UserServiceGetUserProfileProcedure = "/user.v1.UserService/GetUserProfile"
	// UserServiceUpdateUserProfileProcedure is the fully-qualified name of the UserService's
	// UpdateUserProfile RPC.
	UserServiceUpdateUserProfileProcedure = "/user.v1.UserService/UpdateUserProfile"
	// UserServiceAddManagedSecretProcedure is the fully-qualified name of the UserService's
	// AddManagedSecret RPC.
	UserServiceAddManagedSecretProcedure = "/user.v1.UserService/AddManagedSecret"
	// UserServiceListManagedSecretsProcedure is the fully-qualified name of the UserService's
	// ListManagedSecrets RPC.
	UserServiceListManagedSecretsProcedure = "/user.v1.UserService/ListManagedSecrets"
	// UserServiceGetManagedSecretProcedure is the fully-qualified name of the UserService's
	// GetManagedSecret RPC.
	UserServiceGetManagedSecretProcedure = "/user.v1.UserService/GetManagedSecret"
	// UserServiceDeleteManagedSecretProcedure is the fully-qualified name of the UserService's
	// DeleteManagedSecret RPC.
	UserServiceDeleteManagedSecretProcedure = "/user.v1.UserService/DeleteManagedSecret"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetUserProfileResponse], error)
	UpdateUserProfile(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error)
	AddManagedSecret(context.Context, *connect.Request[v1.AddManagedSecretRequest]) (*connect.Response[v1.AddManagedSecretResponse], error)
	ListManagedSecrets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListManagedSecretsResponse], error)
	GetManagedSecret(context.Context, *connect.Request[v1.GetManagedSecretRequest]) (*connect.Response[v1.GetManagedSecretResponse], error)
	DeleteManagedSecret(context.Context, *connect.Request[v1.DeleteManagedSecretRequest]) (*connect.Response[v1.DeleteManagedSecretResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_user_v1_user_service_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getUserProfile: connect.NewClient[emptypb.Empty, v1.GetUserProfileResponse](
			httpClient,
			baseURL+UserServiceGetUserProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
		updateUserProfile: connect.NewClient[v1.UpdateUserProfileRequest, v1.UpdateUserProfileResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUserProfile")),
			connect.WithClientOptions(opts...),
		),
		addManagedSecret: connect.NewClient[v1.AddManagedSecretRequest, v1.AddManagedSecretResponse](
			httpClient,
			baseURL+UserServiceAddManagedSecretProcedure,
			connect.WithSchema(userServiceMethods.ByName("AddManagedSecret")),
			connect.WithClientOptions(opts...),
		),
		listManagedSecrets: connect.NewClient[emptypb.Empty, v1.ListManagedSecretsResponse](
			httpClient,
			baseURL+UserServiceListManagedSecretsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListManagedSecrets")),
			connect.WithClientOptions(opts...),
		),
		getManagedSecret: connect.NewClient[v1.GetManagedSecretRequest, v1.GetManagedSecretResponse](
			httpClient,
			baseURL+UserServiceGetManagedSecretProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetManagedSecret")),
			connect.WithClientOptions(opts...),
		),
		deleteManagedSecret: connect.NewClient[v1.DeleteManagedSecretRequest, v1.DeleteManagedSecretResponse](
			httpClient,
			baseURL+UserServiceDeleteManagedSecretProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteManagedSecret")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUserProfile      *connect.Client[emptypb.Empty, v1.GetUserProfileResponse]
	updateUserProfile   *connect.Client[v1.UpdateUserProfileRequest, v1.UpdateUserProfileResponse]
	addManagedSecret    *connect.Client[v1.AddManagedSecretRequest, v1.AddManagedSecretResponse]
	listManagedSecrets  *connect.Client[emptypb.Empty, v1.ListManagedSecretsResponse]
	getManagedSecret    *connect.Client[v1.GetManagedSecretRequest, v1.GetManagedSecretResponse]
	deleteManagedSecret *connect.Client[v1.DeleteManagedSecretRequest, v1.DeleteManagedSecretResponse]
}

// GetUserProfile calls user.v1.UserService.GetUserProfile.
func (c *userServiceClient) GetUserProfile(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls user.v1.UserService.UpdateUserProfile.
func (c *userServiceClient) UpdateUserProfile(ctx context.Context, req *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// AddManagedSecret calls user.v1.UserService.AddManagedSecret.
func (c *userServiceClient) AddManagedSecret(ctx context.Context, req *connect.Request[v1.AddManagedSecretRequest]) (*connect.Response[v1.AddManagedSecretResponse], error) {
	return c.addManagedSecret.CallUnary(ctx, req)
}

// ListManagedSecrets calls user.v1.UserService.ListManagedSecrets.
func (c *userServiceClient) ListManagedSecrets(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListManagedSecretsResponse], error) {
	return c.listManagedSecrets.CallUnary(ctx, req)
}

// GetManagedSecret calls user.v1.UserService.GetManagedSecret.
func (c *userServiceClient) GetManagedSecret(ctx context.Context, req *connect.Request[v1.GetManagedSecretRequest]) (*connect.Response[v1.GetManagedSecretResponse], error) {
	return c.getManagedSecret.CallUnary(ctx, req)
}

// DeleteManagedSecret calls user.v1.UserService.DeleteManagedSecret.
func (c *userServiceClient) DeleteManagedSecret(ctx context.Context, req *connect.Request[v1.DeleteManagedSecretRequest]) (*connect.Response[v1.DeleteManagedSecretResponse], error) {
	return c.deleteManagedSecret.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetUserProfileResponse], error)
	UpdateUserProfile(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error)
	AddManagedSecret(context.Context, *connect.Request[v1.AddManagedSecretRequest]) (*connect.Response[v1.AddManagedSecretResponse], error)
	ListManagedSecrets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListManagedSecretsResponse], error)
	GetManagedSecret(context.Context, *connect.Request[v1.GetManagedSecretRequest]) (*connect.Response[v1.GetManagedSecretResponse], error)
	DeleteManagedSecret(context.Context, *connect.Request[v1.DeleteManagedSecretRequest]) (*connect.Response[v1.DeleteManagedSecretResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_user_v1_user_service_proto.Services().ByName("UserService").Methods()
	userServiceGetUserProfileHandler := connect.NewUnaryHandler(
		UserServiceGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(userServiceMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserProfileHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		connect.WithSchema(userServiceMethods.ByName("UpdateUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceAddManagedSecretHandler := connect.NewUnaryHandler(
		UserServiceAddManagedSecretProcedure,
		svc.AddManagedSecret,
		connect.WithSchema(userServiceMethods.ByName("AddManagedSecret")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListManagedSecretsHandler := connect.NewUnaryHandler(
		UserServiceListManagedSecretsProcedure,
		svc.ListManagedSecrets,
		connect.WithSchema(userServiceMethods.ByName("ListManagedSecrets")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetManagedSecretHandler := connect.NewUnaryHandler(
		UserServiceGetManagedSecretProcedure,
		svc.GetManagedSecret,
		connect.WithSchema(userServiceMethods.ByName("GetManagedSecret")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteManagedSecretHandler := connect.NewUnaryHandler(
		UserServiceDeleteManagedSecretProcedure,
		svc.DeleteManagedSecret,
		connect.WithSchema(userServiceMethods.ByName("DeleteManagedSecret")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUserProfileProcedure:
			userServiceGetUserProfileHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProfileProcedure:
			userServiceUpdateUserProfileHandler.ServeHTTP(w, r)
		case UserServiceAddManagedSecretProcedure:
			userServiceAddManagedSecretHandler.ServeHTTP(w, r)
		case UserServiceListManagedSecretsProcedure:
			userServiceListManagedSecretsHandler.ServeHTTP(w, r)
		case UserServiceGetManagedSecretProcedure:
			userServiceGetManagedSecretHandler.ServeHTTP(w, r)
		case UserServiceDeleteManagedSecretProcedure:
			userServiceDeleteManagedSecretHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetUserProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserProfile(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UpdateUserProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) AddManagedSecret(context.Context, *connect.Request[v1.AddManagedSecretRequest]) (*connect.Response[v1.AddManagedSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.AddManagedSecret is not implemented"))
}

func (UnimplementedUserServiceHandler) ListManagedSecrets(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListManagedSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.ListManagedSecrets is not implemented"))
}

func (UnimplementedUserServiceHandler) GetManagedSecret(context.Context, *connect.Request[v1.GetManagedSecretRequest]) (*connect.Response[v1.GetManagedSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetManagedSecret is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteManagedSecret(context.Context, *connect.Request[v1.DeleteManagedSecretRequest]) (*connect.Response[v1.DeleteManagedSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.DeleteManagedSecret is not implemented"))
}
