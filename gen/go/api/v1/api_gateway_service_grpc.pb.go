// File: proto/api/v1/api_gateway_service.proto
// The public-facing API Gateway service that acts as a facade for internal services.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/api_gateway_service.proto

package apiv1

import (
	context "context"
	v1 "spounge-proto-gen/auth/v1"
	v11 "spounge-proto-gen/user/v1"
	v12 "spounge-proto-gen/workflow/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIGatewayService_Login_FullMethodName             = "/api.v1.APIGatewayService/Login"
	APIGatewayService_RefreshToken_FullMethodName      = "/api.v1.APIGatewayService/RefreshToken"
	APIGatewayService_Logout_FullMethodName            = "/api.v1.APIGatewayService/Logout"
	APIGatewayService_GetUserProfile_FullMethodName    = "/api.v1.APIGatewayService/GetUserProfile"
	APIGatewayService_UpdateUserProfile_FullMethodName = "/api.v1.APIGatewayService/UpdateUserProfile"
	APIGatewayService_CreateWorkflow_FullMethodName    = "/api.v1.APIGatewayService/CreateWorkflow"
	APIGatewayService_GetWorkflow_FullMethodName       = "/api.v1.APIGatewayService/GetWorkflow"
	APIGatewayService_ListWorkflows_FullMethodName     = "/api.v1.APIGatewayService/ListWorkflows"
	APIGatewayService_StartExecution_FullMethodName    = "/api.v1.APIGatewayService/StartExecution"
	APIGatewayService_GetExecution_FullMethodName      = "/api.v1.APIGatewayService/GetExecution"
	APIGatewayService_GetDashboard_FullMethodName      = "/api.v1.APIGatewayService/GetDashboard"
)

// APIGatewayServiceClient is the client API for APIGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// APIGatewayService is the single entry point for all client-facing traffic.
// It authenticates requests and routes them to the appropriate internal service.
type APIGatewayServiceClient interface {
	// --- AuthService RPCs ---
	Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.LoginResponse, error)
	RefreshToken(ctx context.Context, in *v1.RefreshTokenRequest, opts ...grpc.CallOption) (*v1.RefreshTokenResponse, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.LogoutResponse, error)
	// --- UserService RPCs ---
	GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v11.GetUserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *v11.UpdateUserProfileRequest, opts ...grpc.CallOption) (*v11.UpdateUserProfileResponse, error)
	// --- WorkflowService RPCs ---
	CreateWorkflow(ctx context.Context, in *v12.CreateWorkflowRequest, opts ...grpc.CallOption) (*v12.CreateWorkflowResponse, error)
	GetWorkflow(ctx context.Context, in *v12.GetWorkflowRequest, opts ...grpc.CallOption) (*v12.GetWorkflowResponse, error)
	ListWorkflows(ctx context.Context, in *v12.ListWorkflowsRequest, opts ...grpc.CallOption) (*v12.ListWorkflowsResponse, error)
	// --- ExecutionService RPCs ---
	StartExecution(ctx context.Context, in *v12.StartExecutionRequest, opts ...grpc.CallOption) (*v12.StartExecutionResponse, error)
	GetExecution(ctx context.Context, in *v12.GetExecutionRequest, opts ...grpc.CallOption) (*v12.GetExecutionResponse, error)
	// --- Composed RPCs ---
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error)
}

type aPIGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGatewayServiceClient(cc grpc.ClientConnInterface) APIGatewayServiceClient {
	return &aPIGatewayServiceClient{cc}
}

func (c *aPIGatewayServiceClient) Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.LoginResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) RefreshToken(ctx context.Context, in *v1.RefreshTokenRequest, opts ...grpc.CallOption) (*v1.RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.RefreshTokenResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.LogoutResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v11.GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.GetUserProfileResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) UpdateUserProfile(ctx context.Context, in *v11.UpdateUserProfileRequest, opts ...grpc.CallOption) (*v11.UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) CreateWorkflow(ctx context.Context, in *v12.CreateWorkflowRequest, opts ...grpc.CallOption) (*v12.CreateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v12.CreateWorkflowResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetWorkflow(ctx context.Context, in *v12.GetWorkflowRequest, opts ...grpc.CallOption) (*v12.GetWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v12.GetWorkflowResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) ListWorkflows(ctx context.Context, in *v12.ListWorkflowsRequest, opts ...grpc.CallOption) (*v12.ListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v12.ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) StartExecution(ctx context.Context, in *v12.StartExecutionRequest, opts ...grpc.CallOption) (*v12.StartExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v12.StartExecutionResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_StartExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetExecution(ctx context.Context, in *v12.GetExecutionRequest, opts ...grpc.CallOption) (*v12.GetExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v12.GetExecutionResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayServiceClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardResponse)
	err := c.cc.Invoke(ctx, APIGatewayService_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGatewayServiceServer is the server API for APIGatewayService service.
// All implementations must embed UnimplementedAPIGatewayServiceServer
// for forward compatibility.
//
// APIGatewayService is the single entry point for all client-facing traffic.
// It authenticates requests and routes them to the appropriate internal service.
type APIGatewayServiceServer interface {
	// --- AuthService RPCs ---
	Login(context.Context, *v1.LoginRequest) (*v1.LoginResponse, error)
	RefreshToken(context.Context, *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error)
	Logout(context.Context, *emptypb.Empty) (*v1.LogoutResponse, error)
	// --- UserService RPCs ---
	GetUserProfile(context.Context, *emptypb.Empty) (*v11.GetUserProfileResponse, error)
	UpdateUserProfile(context.Context, *v11.UpdateUserProfileRequest) (*v11.UpdateUserProfileResponse, error)
	// --- WorkflowService RPCs ---
	CreateWorkflow(context.Context, *v12.CreateWorkflowRequest) (*v12.CreateWorkflowResponse, error)
	GetWorkflow(context.Context, *v12.GetWorkflowRequest) (*v12.GetWorkflowResponse, error)
	ListWorkflows(context.Context, *v12.ListWorkflowsRequest) (*v12.ListWorkflowsResponse, error)
	// --- ExecutionService RPCs ---
	StartExecution(context.Context, *v12.StartExecutionRequest) (*v12.StartExecutionResponse, error)
	GetExecution(context.Context, *v12.GetExecutionRequest) (*v12.GetExecutionResponse, error)
	// --- Composed RPCs ---
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error)
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

// UnimplementedAPIGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIGatewayServiceServer struct{}

func (UnimplementedAPIGatewayServiceServer) Login(context.Context, *v1.LoginRequest) (*v1.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAPIGatewayServiceServer) RefreshToken(context.Context, *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAPIGatewayServiceServer) Logout(context.Context, *emptypb.Empty) (*v1.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetUserProfile(context.Context, *emptypb.Empty) (*v11.GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAPIGatewayServiceServer) UpdateUserProfile(context.Context, *v11.UpdateUserProfileRequest) (*v11.UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedAPIGatewayServiceServer) CreateWorkflow(context.Context, *v12.CreateWorkflowRequest) (*v12.CreateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetWorkflow(context.Context, *v12.GetWorkflowRequest) (*v12.GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedAPIGatewayServiceServer) ListWorkflows(context.Context, *v12.ListWorkflowsRequest) (*v12.ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedAPIGatewayServiceServer) StartExecution(context.Context, *v12.StartExecutionRequest) (*v12.StartExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExecution not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetExecution(context.Context, *v12.GetExecutionRequest) (*v12.GetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (UnimplementedAPIGatewayServiceServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedAPIGatewayServiceServer) mustEmbedUnimplementedAPIGatewayServiceServer() {}
func (UnimplementedAPIGatewayServiceServer) testEmbeddedByValue()                           {}

// UnsafeAPIGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGatewayServiceServer will
// result in compilation errors.
type UnsafeAPIGatewayServiceServer interface {
	mustEmbedUnimplementedAPIGatewayServiceServer()
}

func RegisterAPIGatewayServiceServer(s grpc.ServiceRegistrar, srv APIGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIGatewayService_ServiceDesc, srv)
}

func _APIGatewayService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).Login(ctx, req.(*v1.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).RefreshToken(ctx, req.(*v1.RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetUserProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).UpdateUserProfile(ctx, req.(*v11.UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).CreateWorkflow(ctx, req.(*v12.CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetWorkflow(ctx, req.(*v12.GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).ListWorkflows(ctx, req.(*v12.ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_StartExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.StartExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).StartExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_StartExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).StartExecution(ctx, req.(*v12.StartExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.GetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetExecution(ctx, req.(*v12.GetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGatewayService_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServiceServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGatewayService_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServiceServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIGatewayService_ServiceDesc is the grpc.ServiceDesc for APIGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.APIGatewayService",
	HandlerType: (*APIGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _APIGatewayService_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _APIGatewayService_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _APIGatewayService_Logout_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _APIGatewayService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _APIGatewayService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _APIGatewayService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _APIGatewayService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _APIGatewayService_ListWorkflows_Handler,
		},
		{
			MethodName: "StartExecution",
			Handler:    _APIGatewayService_StartExecution_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _APIGatewayService_GetExecution_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _APIGatewayService_GetDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api_gateway_service.proto",
}
