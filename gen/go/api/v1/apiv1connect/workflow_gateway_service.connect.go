// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/workflow_gateway_service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/spounge-ai/spounge-proto/gen/go/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkflowGatewayServiceName is the fully-qualified name of the WorkflowGatewayService service.
	WorkflowGatewayServiceName = "api.v1.WorkflowGatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkflowGatewayServiceCreateWorkflowProcedure is the fully-qualified name of the
	// WorkflowGatewayService's CreateWorkflow RPC.
	WorkflowGatewayServiceCreateWorkflowProcedure = "/api.v1.WorkflowGatewayService/CreateWorkflow"
	// WorkflowGatewayServiceGetWorkflowProcedure is the fully-qualified name of the
	// WorkflowGatewayService's GetWorkflow RPC.
	WorkflowGatewayServiceGetWorkflowProcedure = "/api.v1.WorkflowGatewayService/GetWorkflow"
	// WorkflowGatewayServiceListWorkflowsProcedure is the fully-qualified name of the
	// WorkflowGatewayService's ListWorkflows RPC.
	WorkflowGatewayServiceListWorkflowsProcedure = "/api.v1.WorkflowGatewayService/ListWorkflows"
	// WorkflowGatewayServiceStartExecutionProcedure is the fully-qualified name of the
	// WorkflowGatewayService's StartExecution RPC.
	WorkflowGatewayServiceStartExecutionProcedure = "/api.v1.WorkflowGatewayService/StartExecution"
	// WorkflowGatewayServiceGetExecutionProcedure is the fully-qualified name of the
	// WorkflowGatewayService's GetExecution RPC.
	WorkflowGatewayServiceGetExecutionProcedure = "/api.v1.WorkflowGatewayService/GetExecution"
)

// WorkflowGatewayServiceClient is a client for the api.v1.WorkflowGatewayService service.
type WorkflowGatewayServiceClient interface {
	CreateWorkflow(context.Context, *connect.Request[v1.WorkflowGatewayServiceCreateWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceCreateWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v1.WorkflowGatewayServiceGetWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.WorkflowGatewayServiceListWorkflowsRequest]) (*connect.Response[v1.WorkflowGatewayServiceListWorkflowsResponse], error)
	StartExecution(context.Context, *connect.Request[v1.WorkflowGatewayServiceStartExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceStartExecutionResponse], error)
	GetExecution(context.Context, *connect.Request[v1.WorkflowGatewayServiceGetExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetExecutionResponse], error)
}

// NewWorkflowGatewayServiceClient constructs a client for the api.v1.WorkflowGatewayService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkflowGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkflowGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workflowGatewayServiceMethods := v1.File_api_v1_workflow_gateway_service_proto.Services().ByName("WorkflowGatewayService").Methods()
	return &workflowGatewayServiceClient{
		createWorkflow: connect.NewClient[v1.WorkflowGatewayServiceCreateWorkflowRequest, v1.WorkflowGatewayServiceCreateWorkflowResponse](
			httpClient,
			baseURL+WorkflowGatewayServiceCreateWorkflowProcedure,
			connect.WithSchema(workflowGatewayServiceMethods.ByName("CreateWorkflow")),
			connect.WithClientOptions(opts...),
		),
		getWorkflow: connect.NewClient[v1.WorkflowGatewayServiceGetWorkflowRequest, v1.WorkflowGatewayServiceGetWorkflowResponse](
			httpClient,
			baseURL+WorkflowGatewayServiceGetWorkflowProcedure,
			connect.WithSchema(workflowGatewayServiceMethods.ByName("GetWorkflow")),
			connect.WithClientOptions(opts...),
		),
		listWorkflows: connect.NewClient[v1.WorkflowGatewayServiceListWorkflowsRequest, v1.WorkflowGatewayServiceListWorkflowsResponse](
			httpClient,
			baseURL+WorkflowGatewayServiceListWorkflowsProcedure,
			connect.WithSchema(workflowGatewayServiceMethods.ByName("ListWorkflows")),
			connect.WithClientOptions(opts...),
		),
		startExecution: connect.NewClient[v1.WorkflowGatewayServiceStartExecutionRequest, v1.WorkflowGatewayServiceStartExecutionResponse](
			httpClient,
			baseURL+WorkflowGatewayServiceStartExecutionProcedure,
			connect.WithSchema(workflowGatewayServiceMethods.ByName("StartExecution")),
			connect.WithClientOptions(opts...),
		),
		getExecution: connect.NewClient[v1.WorkflowGatewayServiceGetExecutionRequest, v1.WorkflowGatewayServiceGetExecutionResponse](
			httpClient,
			baseURL+WorkflowGatewayServiceGetExecutionProcedure,
			connect.WithSchema(workflowGatewayServiceMethods.ByName("GetExecution")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workflowGatewayServiceClient implements WorkflowGatewayServiceClient.
type workflowGatewayServiceClient struct {
	createWorkflow *connect.Client[v1.WorkflowGatewayServiceCreateWorkflowRequest, v1.WorkflowGatewayServiceCreateWorkflowResponse]
	getWorkflow    *connect.Client[v1.WorkflowGatewayServiceGetWorkflowRequest, v1.WorkflowGatewayServiceGetWorkflowResponse]
	listWorkflows  *connect.Client[v1.WorkflowGatewayServiceListWorkflowsRequest, v1.WorkflowGatewayServiceListWorkflowsResponse]
	startExecution *connect.Client[v1.WorkflowGatewayServiceStartExecutionRequest, v1.WorkflowGatewayServiceStartExecutionResponse]
	getExecution   *connect.Client[v1.WorkflowGatewayServiceGetExecutionRequest, v1.WorkflowGatewayServiceGetExecutionResponse]
}

// CreateWorkflow calls api.v1.WorkflowGatewayService.CreateWorkflow.
func (c *workflowGatewayServiceClient) CreateWorkflow(ctx context.Context, req *connect.Request[v1.WorkflowGatewayServiceCreateWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceCreateWorkflowResponse], error) {
	return c.createWorkflow.CallUnary(ctx, req)
}

// GetWorkflow calls api.v1.WorkflowGatewayService.GetWorkflow.
func (c *workflowGatewayServiceClient) GetWorkflow(ctx context.Context, req *connect.Request[v1.WorkflowGatewayServiceGetWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetWorkflowResponse], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// ListWorkflows calls api.v1.WorkflowGatewayService.ListWorkflows.
func (c *workflowGatewayServiceClient) ListWorkflows(ctx context.Context, req *connect.Request[v1.WorkflowGatewayServiceListWorkflowsRequest]) (*connect.Response[v1.WorkflowGatewayServiceListWorkflowsResponse], error) {
	return c.listWorkflows.CallUnary(ctx, req)
}

// StartExecution calls api.v1.WorkflowGatewayService.StartExecution.
func (c *workflowGatewayServiceClient) StartExecution(ctx context.Context, req *connect.Request[v1.WorkflowGatewayServiceStartExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceStartExecutionResponse], error) {
	return c.startExecution.CallUnary(ctx, req)
}

// GetExecution calls api.v1.WorkflowGatewayService.GetExecution.
func (c *workflowGatewayServiceClient) GetExecution(ctx context.Context, req *connect.Request[v1.WorkflowGatewayServiceGetExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetExecutionResponse], error) {
	return c.getExecution.CallUnary(ctx, req)
}

// WorkflowGatewayServiceHandler is an implementation of the api.v1.WorkflowGatewayService service.
type WorkflowGatewayServiceHandler interface {
	CreateWorkflow(context.Context, *connect.Request[v1.WorkflowGatewayServiceCreateWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceCreateWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v1.WorkflowGatewayServiceGetWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.WorkflowGatewayServiceListWorkflowsRequest]) (*connect.Response[v1.WorkflowGatewayServiceListWorkflowsResponse], error)
	StartExecution(context.Context, *connect.Request[v1.WorkflowGatewayServiceStartExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceStartExecutionResponse], error)
	GetExecution(context.Context, *connect.Request[v1.WorkflowGatewayServiceGetExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetExecutionResponse], error)
}

// NewWorkflowGatewayServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkflowGatewayServiceHandler(svc WorkflowGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workflowGatewayServiceMethods := v1.File_api_v1_workflow_gateway_service_proto.Services().ByName("WorkflowGatewayService").Methods()
	workflowGatewayServiceCreateWorkflowHandler := connect.NewUnaryHandler(
		WorkflowGatewayServiceCreateWorkflowProcedure,
		svc.CreateWorkflow,
		connect.WithSchema(workflowGatewayServiceMethods.ByName("CreateWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowGatewayServiceGetWorkflowHandler := connect.NewUnaryHandler(
		WorkflowGatewayServiceGetWorkflowProcedure,
		svc.GetWorkflow,
		connect.WithSchema(workflowGatewayServiceMethods.ByName("GetWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowGatewayServiceListWorkflowsHandler := connect.NewUnaryHandler(
		WorkflowGatewayServiceListWorkflowsProcedure,
		svc.ListWorkflows,
		connect.WithSchema(workflowGatewayServiceMethods.ByName("ListWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	workflowGatewayServiceStartExecutionHandler := connect.NewUnaryHandler(
		WorkflowGatewayServiceStartExecutionProcedure,
		svc.StartExecution,
		connect.WithSchema(workflowGatewayServiceMethods.ByName("StartExecution")),
		connect.WithHandlerOptions(opts...),
	)
	workflowGatewayServiceGetExecutionHandler := connect.NewUnaryHandler(
		WorkflowGatewayServiceGetExecutionProcedure,
		svc.GetExecution,
		connect.WithSchema(workflowGatewayServiceMethods.ByName("GetExecution")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.WorkflowGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkflowGatewayServiceCreateWorkflowProcedure:
			workflowGatewayServiceCreateWorkflowHandler.ServeHTTP(w, r)
		case WorkflowGatewayServiceGetWorkflowProcedure:
			workflowGatewayServiceGetWorkflowHandler.ServeHTTP(w, r)
		case WorkflowGatewayServiceListWorkflowsProcedure:
			workflowGatewayServiceListWorkflowsHandler.ServeHTTP(w, r)
		case WorkflowGatewayServiceStartExecutionProcedure:
			workflowGatewayServiceStartExecutionHandler.ServeHTTP(w, r)
		case WorkflowGatewayServiceGetExecutionProcedure:
			workflowGatewayServiceGetExecutionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkflowGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkflowGatewayServiceHandler struct{}

func (UnimplementedWorkflowGatewayServiceHandler) CreateWorkflow(context.Context, *connect.Request[v1.WorkflowGatewayServiceCreateWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceCreateWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.WorkflowGatewayService.CreateWorkflow is not implemented"))
}

func (UnimplementedWorkflowGatewayServiceHandler) GetWorkflow(context.Context, *connect.Request[v1.WorkflowGatewayServiceGetWorkflowRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.WorkflowGatewayService.GetWorkflow is not implemented"))
}

func (UnimplementedWorkflowGatewayServiceHandler) ListWorkflows(context.Context, *connect.Request[v1.WorkflowGatewayServiceListWorkflowsRequest]) (*connect.Response[v1.WorkflowGatewayServiceListWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.WorkflowGatewayService.ListWorkflows is not implemented"))
}

func (UnimplementedWorkflowGatewayServiceHandler) StartExecution(context.Context, *connect.Request[v1.WorkflowGatewayServiceStartExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceStartExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.WorkflowGatewayService.StartExecution is not implemented"))
}

func (UnimplementedWorkflowGatewayServiceHandler) GetExecution(context.Context, *connect.Request[v1.WorkflowGatewayServiceGetExecutionRequest]) (*connect.Response[v1.WorkflowGatewayServiceGetExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.WorkflowGatewayService.GetExecution is not implemented"))
}
