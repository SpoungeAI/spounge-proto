// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/auth_gateway_service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/spounge-ai/spounge-proto/gen/go/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthGatewayServiceName is the fully-qualified name of the AuthGatewayService service.
	AuthGatewayServiceName = "api.v1.AuthGatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthGatewayServiceLoginProcedure is the fully-qualified name of the AuthGatewayService's Login
	// RPC.
	AuthGatewayServiceLoginProcedure = "/api.v1.AuthGatewayService/Login"
	// AuthGatewayServiceRefreshTokenProcedure is the fully-qualified name of the AuthGatewayService's
	// RefreshToken RPC.
	AuthGatewayServiceRefreshTokenProcedure = "/api.v1.AuthGatewayService/RefreshToken"
	// AuthGatewayServiceLogoutProcedure is the fully-qualified name of the AuthGatewayService's Logout
	// RPC.
	AuthGatewayServiceLogoutProcedure = "/api.v1.AuthGatewayService/Logout"
)

// AuthGatewayServiceClient is a client for the api.v1.AuthGatewayService service.
type AuthGatewayServiceClient interface {
	Login(context.Context, *connect.Request[v1.AuthGatewayServiceLoginRequest]) (*connect.Response[v1.AuthGatewayServiceLoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.AuthGatewayServiceRefreshTokenRequest]) (*connect.Response[v1.AuthGatewayServiceRefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[v1.AuthGatewayServiceLogoutRequest]) (*connect.Response[v1.AuthGatewayServiceLogoutResponse], error)
}

// NewAuthGatewayServiceClient constructs a client for the api.v1.AuthGatewayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authGatewayServiceMethods := v1.File_api_v1_auth_gateway_service_proto.Services().ByName("AuthGatewayService").Methods()
	return &authGatewayServiceClient{
		login: connect.NewClient[v1.AuthGatewayServiceLoginRequest, v1.AuthGatewayServiceLoginResponse](
			httpClient,
			baseURL+AuthGatewayServiceLoginProcedure,
			connect.WithSchema(authGatewayServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.AuthGatewayServiceRefreshTokenRequest, v1.AuthGatewayServiceRefreshTokenResponse](
			httpClient,
			baseURL+AuthGatewayServiceRefreshTokenProcedure,
			connect.WithSchema(authGatewayServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.AuthGatewayServiceLogoutRequest, v1.AuthGatewayServiceLogoutResponse](
			httpClient,
			baseURL+AuthGatewayServiceLogoutProcedure,
			connect.WithSchema(authGatewayServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authGatewayServiceClient implements AuthGatewayServiceClient.
type authGatewayServiceClient struct {
	login        *connect.Client[v1.AuthGatewayServiceLoginRequest, v1.AuthGatewayServiceLoginResponse]
	refreshToken *connect.Client[v1.AuthGatewayServiceRefreshTokenRequest, v1.AuthGatewayServiceRefreshTokenResponse]
	logout       *connect.Client[v1.AuthGatewayServiceLogoutRequest, v1.AuthGatewayServiceLogoutResponse]
}

// Login calls api.v1.AuthGatewayService.Login.
func (c *authGatewayServiceClient) Login(ctx context.Context, req *connect.Request[v1.AuthGatewayServiceLoginRequest]) (*connect.Response[v1.AuthGatewayServiceLoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls api.v1.AuthGatewayService.RefreshToken.
func (c *authGatewayServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.AuthGatewayServiceRefreshTokenRequest]) (*connect.Response[v1.AuthGatewayServiceRefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Logout calls api.v1.AuthGatewayService.Logout.
func (c *authGatewayServiceClient) Logout(ctx context.Context, req *connect.Request[v1.AuthGatewayServiceLogoutRequest]) (*connect.Response[v1.AuthGatewayServiceLogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// AuthGatewayServiceHandler is an implementation of the api.v1.AuthGatewayService service.
type AuthGatewayServiceHandler interface {
	Login(context.Context, *connect.Request[v1.AuthGatewayServiceLoginRequest]) (*connect.Response[v1.AuthGatewayServiceLoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.AuthGatewayServiceRefreshTokenRequest]) (*connect.Response[v1.AuthGatewayServiceRefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[v1.AuthGatewayServiceLogoutRequest]) (*connect.Response[v1.AuthGatewayServiceLogoutResponse], error)
}

// NewAuthGatewayServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthGatewayServiceHandler(svc AuthGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authGatewayServiceMethods := v1.File_api_v1_auth_gateway_service_proto.Services().ByName("AuthGatewayService").Methods()
	authGatewayServiceLoginHandler := connect.NewUnaryHandler(
		AuthGatewayServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authGatewayServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authGatewayServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthGatewayServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authGatewayServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authGatewayServiceLogoutHandler := connect.NewUnaryHandler(
		AuthGatewayServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authGatewayServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.AuthGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthGatewayServiceLoginProcedure:
			authGatewayServiceLoginHandler.ServeHTTP(w, r)
		case AuthGatewayServiceRefreshTokenProcedure:
			authGatewayServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthGatewayServiceLogoutProcedure:
			authGatewayServiceLogoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthGatewayServiceHandler struct{}

func (UnimplementedAuthGatewayServiceHandler) Login(context.Context, *connect.Request[v1.AuthGatewayServiceLoginRequest]) (*connect.Response[v1.AuthGatewayServiceLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AuthGatewayService.Login is not implemented"))
}

func (UnimplementedAuthGatewayServiceHandler) RefreshToken(context.Context, *connect.Request[v1.AuthGatewayServiceRefreshTokenRequest]) (*connect.Response[v1.AuthGatewayServiceRefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AuthGatewayService.RefreshToken is not implemented"))
}

func (UnimplementedAuthGatewayServiceHandler) Logout(context.Context, *connect.Request[v1.AuthGatewayServiceLogoutRequest]) (*connect.Response[v1.AuthGatewayServiceLogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AuthGatewayService.Logout is not implemented"))
}
