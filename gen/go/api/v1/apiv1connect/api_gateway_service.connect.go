// File: proto/api/v1/api_gateway_service.proto
// The public-facing API Gateway service that acts as a facade for internal services.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api_gateway_service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v13 "spounge-proto-gen/api/v1"
	v1 "spounge-proto-gen/auth/v1"
	v11 "spounge-proto-gen/user/v1"
	v12 "spounge-proto-gen/workflow/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// APIGatewayServiceName is the fully-qualified name of the APIGatewayService service.
	APIGatewayServiceName = "api.v1.APIGatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIGatewayServiceLoginProcedure is the fully-qualified name of the APIGatewayService's Login RPC.
	APIGatewayServiceLoginProcedure = "/api.v1.APIGatewayService/Login"
	// APIGatewayServiceRefreshTokenProcedure is the fully-qualified name of the APIGatewayService's
	// RefreshToken RPC.
	APIGatewayServiceRefreshTokenProcedure = "/api.v1.APIGatewayService/RefreshToken"
	// APIGatewayServiceLogoutProcedure is the fully-qualified name of the APIGatewayService's Logout
	// RPC.
	APIGatewayServiceLogoutProcedure = "/api.v1.APIGatewayService/Logout"
	// APIGatewayServiceGetUserProfileProcedure is the fully-qualified name of the APIGatewayService's
	// GetUserProfile RPC.
	APIGatewayServiceGetUserProfileProcedure = "/api.v1.APIGatewayService/GetUserProfile"
	// APIGatewayServiceUpdateUserProfileProcedure is the fully-qualified name of the
	// APIGatewayService's UpdateUserProfile RPC.
	APIGatewayServiceUpdateUserProfileProcedure = "/api.v1.APIGatewayService/UpdateUserProfile"
	// APIGatewayServiceCreateWorkflowProcedure is the fully-qualified name of the APIGatewayService's
	// CreateWorkflow RPC.
	APIGatewayServiceCreateWorkflowProcedure = "/api.v1.APIGatewayService/CreateWorkflow"
	// APIGatewayServiceGetWorkflowProcedure is the fully-qualified name of the APIGatewayService's
	// GetWorkflow RPC.
	APIGatewayServiceGetWorkflowProcedure = "/api.v1.APIGatewayService/GetWorkflow"
	// APIGatewayServiceListWorkflowsProcedure is the fully-qualified name of the APIGatewayService's
	// ListWorkflows RPC.
	APIGatewayServiceListWorkflowsProcedure = "/api.v1.APIGatewayService/ListWorkflows"
	// APIGatewayServiceStartExecutionProcedure is the fully-qualified name of the APIGatewayService's
	// StartExecution RPC.
	APIGatewayServiceStartExecutionProcedure = "/api.v1.APIGatewayService/StartExecution"
	// APIGatewayServiceGetExecutionProcedure is the fully-qualified name of the APIGatewayService's
	// GetExecution RPC.
	APIGatewayServiceGetExecutionProcedure = "/api.v1.APIGatewayService/GetExecution"
	// APIGatewayServiceGetDashboardProcedure is the fully-qualified name of the APIGatewayService's
	// GetDashboard RPC.
	APIGatewayServiceGetDashboardProcedure = "/api.v1.APIGatewayService/GetDashboard"
)

// APIGatewayServiceClient is a client for the api.v1.APIGatewayService service.
type APIGatewayServiceClient interface {
	// --- AuthService RPCs ---
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.LogoutResponse], error)
	// --- UserService RPCs ---
	GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.GetUserProfileResponse], error)
	UpdateUserProfile(context.Context, *connect.Request[v11.UpdateUserProfileRequest]) (*connect.Response[v11.UpdateUserProfileResponse], error)
	// --- WorkflowService RPCs ---
	CreateWorkflow(context.Context, *connect.Request[v12.CreateWorkflowRequest]) (*connect.Response[v12.CreateWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v12.GetWorkflowRequest]) (*connect.Response[v12.GetWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v12.ListWorkflowsRequest]) (*connect.Response[v12.ListWorkflowsResponse], error)
	// --- ExecutionService RPCs ---
	StartExecution(context.Context, *connect.Request[v12.StartExecutionRequest]) (*connect.Response[v12.StartExecutionResponse], error)
	GetExecution(context.Context, *connect.Request[v12.GetExecutionRequest]) (*connect.Response[v12.GetExecutionResponse], error)
	// --- Composed RPCs ---
	GetDashboard(context.Context, *connect.Request[v13.GetDashboardRequest]) (*connect.Response[v13.GetDashboardResponse], error)
}

// NewAPIGatewayServiceClient constructs a client for the api.v1.APIGatewayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APIGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aPIGatewayServiceMethods := v13.File_api_v1_api_gateway_service_proto.Services().ByName("APIGatewayService").Methods()
	return &aPIGatewayServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+APIGatewayServiceLoginProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+APIGatewayServiceRefreshTokenProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[emptypb.Empty, v1.LogoutResponse](
			httpClient,
			baseURL+APIGatewayServiceLogoutProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		getUserProfile: connect.NewClient[emptypb.Empty, v11.GetUserProfileResponse](
			httpClient,
			baseURL+APIGatewayServiceGetUserProfileProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
		updateUserProfile: connect.NewClient[v11.UpdateUserProfileRequest, v11.UpdateUserProfileResponse](
			httpClient,
			baseURL+APIGatewayServiceUpdateUserProfileProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("UpdateUserProfile")),
			connect.WithClientOptions(opts...),
		),
		createWorkflow: connect.NewClient[v12.CreateWorkflowRequest, v12.CreateWorkflowResponse](
			httpClient,
			baseURL+APIGatewayServiceCreateWorkflowProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("CreateWorkflow")),
			connect.WithClientOptions(opts...),
		),
		getWorkflow: connect.NewClient[v12.GetWorkflowRequest, v12.GetWorkflowResponse](
			httpClient,
			baseURL+APIGatewayServiceGetWorkflowProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("GetWorkflow")),
			connect.WithClientOptions(opts...),
		),
		listWorkflows: connect.NewClient[v12.ListWorkflowsRequest, v12.ListWorkflowsResponse](
			httpClient,
			baseURL+APIGatewayServiceListWorkflowsProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("ListWorkflows")),
			connect.WithClientOptions(opts...),
		),
		startExecution: connect.NewClient[v12.StartExecutionRequest, v12.StartExecutionResponse](
			httpClient,
			baseURL+APIGatewayServiceStartExecutionProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("StartExecution")),
			connect.WithClientOptions(opts...),
		),
		getExecution: connect.NewClient[v12.GetExecutionRequest, v12.GetExecutionResponse](
			httpClient,
			baseURL+APIGatewayServiceGetExecutionProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("GetExecution")),
			connect.WithClientOptions(opts...),
		),
		getDashboard: connect.NewClient[v13.GetDashboardRequest, v13.GetDashboardResponse](
			httpClient,
			baseURL+APIGatewayServiceGetDashboardProcedure,
			connect.WithSchema(aPIGatewayServiceMethods.ByName("GetDashboard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aPIGatewayServiceClient implements APIGatewayServiceClient.
type aPIGatewayServiceClient struct {
	login             *connect.Client[v1.LoginRequest, v1.LoginResponse]
	refreshToken      *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	logout            *connect.Client[emptypb.Empty, v1.LogoutResponse]
	getUserProfile    *connect.Client[emptypb.Empty, v11.GetUserProfileResponse]
	updateUserProfile *connect.Client[v11.UpdateUserProfileRequest, v11.UpdateUserProfileResponse]
	createWorkflow    *connect.Client[v12.CreateWorkflowRequest, v12.CreateWorkflowResponse]
	getWorkflow       *connect.Client[v12.GetWorkflowRequest, v12.GetWorkflowResponse]
	listWorkflows     *connect.Client[v12.ListWorkflowsRequest, v12.ListWorkflowsResponse]
	startExecution    *connect.Client[v12.StartExecutionRequest, v12.StartExecutionResponse]
	getExecution      *connect.Client[v12.GetExecutionRequest, v12.GetExecutionResponse]
	getDashboard      *connect.Client[v13.GetDashboardRequest, v13.GetDashboardResponse]
}

// Login calls api.v1.APIGatewayService.Login.
func (c *aPIGatewayServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls api.v1.APIGatewayService.RefreshToken.
func (c *aPIGatewayServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Logout calls api.v1.APIGatewayService.Logout.
func (c *aPIGatewayServiceClient) Logout(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// GetUserProfile calls api.v1.APIGatewayService.GetUserProfile.
func (c *aPIGatewayServiceClient) GetUserProfile(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls api.v1.APIGatewayService.UpdateUserProfile.
func (c *aPIGatewayServiceClient) UpdateUserProfile(ctx context.Context, req *connect.Request[v11.UpdateUserProfileRequest]) (*connect.Response[v11.UpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// CreateWorkflow calls api.v1.APIGatewayService.CreateWorkflow.
func (c *aPIGatewayServiceClient) CreateWorkflow(ctx context.Context, req *connect.Request[v12.CreateWorkflowRequest]) (*connect.Response[v12.CreateWorkflowResponse], error) {
	return c.createWorkflow.CallUnary(ctx, req)
}

// GetWorkflow calls api.v1.APIGatewayService.GetWorkflow.
func (c *aPIGatewayServiceClient) GetWorkflow(ctx context.Context, req *connect.Request[v12.GetWorkflowRequest]) (*connect.Response[v12.GetWorkflowResponse], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// ListWorkflows calls api.v1.APIGatewayService.ListWorkflows.
func (c *aPIGatewayServiceClient) ListWorkflows(ctx context.Context, req *connect.Request[v12.ListWorkflowsRequest]) (*connect.Response[v12.ListWorkflowsResponse], error) {
	return c.listWorkflows.CallUnary(ctx, req)
}

// StartExecution calls api.v1.APIGatewayService.StartExecution.
func (c *aPIGatewayServiceClient) StartExecution(ctx context.Context, req *connect.Request[v12.StartExecutionRequest]) (*connect.Response[v12.StartExecutionResponse], error) {
	return c.startExecution.CallUnary(ctx, req)
}

// GetExecution calls api.v1.APIGatewayService.GetExecution.
func (c *aPIGatewayServiceClient) GetExecution(ctx context.Context, req *connect.Request[v12.GetExecutionRequest]) (*connect.Response[v12.GetExecutionResponse], error) {
	return c.getExecution.CallUnary(ctx, req)
}

// GetDashboard calls api.v1.APIGatewayService.GetDashboard.
func (c *aPIGatewayServiceClient) GetDashboard(ctx context.Context, req *connect.Request[v13.GetDashboardRequest]) (*connect.Response[v13.GetDashboardResponse], error) {
	return c.getDashboard.CallUnary(ctx, req)
}

// APIGatewayServiceHandler is an implementation of the api.v1.APIGatewayService service.
type APIGatewayServiceHandler interface {
	// --- AuthService RPCs ---
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.LogoutResponse], error)
	// --- UserService RPCs ---
	GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.GetUserProfileResponse], error)
	UpdateUserProfile(context.Context, *connect.Request[v11.UpdateUserProfileRequest]) (*connect.Response[v11.UpdateUserProfileResponse], error)
	// --- WorkflowService RPCs ---
	CreateWorkflow(context.Context, *connect.Request[v12.CreateWorkflowRequest]) (*connect.Response[v12.CreateWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v12.GetWorkflowRequest]) (*connect.Response[v12.GetWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v12.ListWorkflowsRequest]) (*connect.Response[v12.ListWorkflowsResponse], error)
	// --- ExecutionService RPCs ---
	StartExecution(context.Context, *connect.Request[v12.StartExecutionRequest]) (*connect.Response[v12.StartExecutionResponse], error)
	GetExecution(context.Context, *connect.Request[v12.GetExecutionRequest]) (*connect.Response[v12.GetExecutionResponse], error)
	// --- Composed RPCs ---
	GetDashboard(context.Context, *connect.Request[v13.GetDashboardRequest]) (*connect.Response[v13.GetDashboardResponse], error)
}

// NewAPIGatewayServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIGatewayServiceHandler(svc APIGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPIGatewayServiceMethods := v13.File_api_v1_api_gateway_service_proto.Services().ByName("APIGatewayService").Methods()
	aPIGatewayServiceLoginHandler := connect.NewUnaryHandler(
		APIGatewayServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceRefreshTokenHandler := connect.NewUnaryHandler(
		APIGatewayServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceLogoutHandler := connect.NewUnaryHandler(
		APIGatewayServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceGetUserProfileHandler := connect.NewUnaryHandler(
		APIGatewayServiceGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceUpdateUserProfileHandler := connect.NewUnaryHandler(
		APIGatewayServiceUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("UpdateUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceCreateWorkflowHandler := connect.NewUnaryHandler(
		APIGatewayServiceCreateWorkflowProcedure,
		svc.CreateWorkflow,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("CreateWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceGetWorkflowHandler := connect.NewUnaryHandler(
		APIGatewayServiceGetWorkflowProcedure,
		svc.GetWorkflow,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("GetWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceListWorkflowsHandler := connect.NewUnaryHandler(
		APIGatewayServiceListWorkflowsProcedure,
		svc.ListWorkflows,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("ListWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceStartExecutionHandler := connect.NewUnaryHandler(
		APIGatewayServiceStartExecutionProcedure,
		svc.StartExecution,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("StartExecution")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceGetExecutionHandler := connect.NewUnaryHandler(
		APIGatewayServiceGetExecutionProcedure,
		svc.GetExecution,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("GetExecution")),
		connect.WithHandlerOptions(opts...),
	)
	aPIGatewayServiceGetDashboardHandler := connect.NewUnaryHandler(
		APIGatewayServiceGetDashboardProcedure,
		svc.GetDashboard,
		connect.WithSchema(aPIGatewayServiceMethods.ByName("GetDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.APIGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APIGatewayServiceLoginProcedure:
			aPIGatewayServiceLoginHandler.ServeHTTP(w, r)
		case APIGatewayServiceRefreshTokenProcedure:
			aPIGatewayServiceRefreshTokenHandler.ServeHTTP(w, r)
		case APIGatewayServiceLogoutProcedure:
			aPIGatewayServiceLogoutHandler.ServeHTTP(w, r)
		case APIGatewayServiceGetUserProfileProcedure:
			aPIGatewayServiceGetUserProfileHandler.ServeHTTP(w, r)
		case APIGatewayServiceUpdateUserProfileProcedure:
			aPIGatewayServiceUpdateUserProfileHandler.ServeHTTP(w, r)
		case APIGatewayServiceCreateWorkflowProcedure:
			aPIGatewayServiceCreateWorkflowHandler.ServeHTTP(w, r)
		case APIGatewayServiceGetWorkflowProcedure:
			aPIGatewayServiceGetWorkflowHandler.ServeHTTP(w, r)
		case APIGatewayServiceListWorkflowsProcedure:
			aPIGatewayServiceListWorkflowsHandler.ServeHTTP(w, r)
		case APIGatewayServiceStartExecutionProcedure:
			aPIGatewayServiceStartExecutionHandler.ServeHTTP(w, r)
		case APIGatewayServiceGetExecutionProcedure:
			aPIGatewayServiceGetExecutionHandler.ServeHTTP(w, r)
		case APIGatewayServiceGetDashboardProcedure:
			aPIGatewayServiceGetDashboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIGatewayServiceHandler struct{}

func (UnimplementedAPIGatewayServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.Login is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.RefreshToken is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) Logout(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.Logout is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.GetUserProfile is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) UpdateUserProfile(context.Context, *connect.Request[v11.UpdateUserProfileRequest]) (*connect.Response[v11.UpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.UpdateUserProfile is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) CreateWorkflow(context.Context, *connect.Request[v12.CreateWorkflowRequest]) (*connect.Response[v12.CreateWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.CreateWorkflow is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) GetWorkflow(context.Context, *connect.Request[v12.GetWorkflowRequest]) (*connect.Response[v12.GetWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.GetWorkflow is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) ListWorkflows(context.Context, *connect.Request[v12.ListWorkflowsRequest]) (*connect.Response[v12.ListWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.ListWorkflows is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) StartExecution(context.Context, *connect.Request[v12.StartExecutionRequest]) (*connect.Response[v12.StartExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.StartExecution is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) GetExecution(context.Context, *connect.Request[v12.GetExecutionRequest]) (*connect.Response[v12.GetExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.GetExecution is not implemented"))
}

func (UnimplementedAPIGatewayServiceHandler) GetDashboard(context.Context, *connect.Request[v13.GetDashboardRequest]) (*connect.Response[v13.GetDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIGatewayService.GetDashboard is not implemented"))
}
