// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/user_gateway_service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/spounge-ai/spounge-proto/gen/go/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserGatewayServiceName is the fully-qualified name of the UserGatewayService service.
	UserGatewayServiceName = "api.v1.UserGatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserGatewayServiceGetUserProfileProcedure is the fully-qualified name of the UserGatewayService's
	// GetUserProfile RPC.
	UserGatewayServiceGetUserProfileProcedure = "/api.v1.UserGatewayService/GetUserProfile"
	// UserGatewayServiceUpdateUserProfileProcedure is the fully-qualified name of the
	// UserGatewayService's UpdateUserProfile RPC.
	UserGatewayServiceUpdateUserProfileProcedure = "/api.v1.UserGatewayService/UpdateUserProfile"
)

// UserGatewayServiceClient is a client for the api.v1.UserGatewayService service.
type UserGatewayServiceClient interface {
	GetUserProfile(context.Context, *connect.Request[v1.UserGatewayServiceGetUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceGetUserProfileResponse], error)
	UpdateUserProfile(context.Context, *connect.Request[v1.UserGatewayServiceUpdateUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceUpdateUserProfileResponse], error)
}

// NewUserGatewayServiceClient constructs a client for the api.v1.UserGatewayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserGatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userGatewayServiceMethods := v1.File_api_v1_user_gateway_service_proto.Services().ByName("UserGatewayService").Methods()
	return &userGatewayServiceClient{
		getUserProfile: connect.NewClient[v1.UserGatewayServiceGetUserProfileRequest, v1.UserGatewayServiceGetUserProfileResponse](
			httpClient,
			baseURL+UserGatewayServiceGetUserProfileProcedure,
			connect.WithSchema(userGatewayServiceMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
		updateUserProfile: connect.NewClient[v1.UserGatewayServiceUpdateUserProfileRequest, v1.UserGatewayServiceUpdateUserProfileResponse](
			httpClient,
			baseURL+UserGatewayServiceUpdateUserProfileProcedure,
			connect.WithSchema(userGatewayServiceMethods.ByName("UpdateUserProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userGatewayServiceClient implements UserGatewayServiceClient.
type userGatewayServiceClient struct {
	getUserProfile    *connect.Client[v1.UserGatewayServiceGetUserProfileRequest, v1.UserGatewayServiceGetUserProfileResponse]
	updateUserProfile *connect.Client[v1.UserGatewayServiceUpdateUserProfileRequest, v1.UserGatewayServiceUpdateUserProfileResponse]
}

// GetUserProfile calls api.v1.UserGatewayService.GetUserProfile.
func (c *userGatewayServiceClient) GetUserProfile(ctx context.Context, req *connect.Request[v1.UserGatewayServiceGetUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceGetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UpdateUserProfile calls api.v1.UserGatewayService.UpdateUserProfile.
func (c *userGatewayServiceClient) UpdateUserProfile(ctx context.Context, req *connect.Request[v1.UserGatewayServiceUpdateUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceUpdateUserProfileResponse], error) {
	return c.updateUserProfile.CallUnary(ctx, req)
}

// UserGatewayServiceHandler is an implementation of the api.v1.UserGatewayService service.
type UserGatewayServiceHandler interface {
	GetUserProfile(context.Context, *connect.Request[v1.UserGatewayServiceGetUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceGetUserProfileResponse], error)
	UpdateUserProfile(context.Context, *connect.Request[v1.UserGatewayServiceUpdateUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceUpdateUserProfileResponse], error)
}

// NewUserGatewayServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserGatewayServiceHandler(svc UserGatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userGatewayServiceMethods := v1.File_api_v1_user_gateway_service_proto.Services().ByName("UserGatewayService").Methods()
	userGatewayServiceGetUserProfileHandler := connect.NewUnaryHandler(
		UserGatewayServiceGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(userGatewayServiceMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userGatewayServiceUpdateUserProfileHandler := connect.NewUnaryHandler(
		UserGatewayServiceUpdateUserProfileProcedure,
		svc.UpdateUserProfile,
		connect.WithSchema(userGatewayServiceMethods.ByName("UpdateUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.UserGatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserGatewayServiceGetUserProfileProcedure:
			userGatewayServiceGetUserProfileHandler.ServeHTTP(w, r)
		case UserGatewayServiceUpdateUserProfileProcedure:
			userGatewayServiceUpdateUserProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserGatewayServiceHandler struct{}

func (UnimplementedUserGatewayServiceHandler) GetUserProfile(context.Context, *connect.Request[v1.UserGatewayServiceGetUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceGetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserGatewayService.GetUserProfile is not implemented"))
}

func (UnimplementedUserGatewayServiceHandler) UpdateUserProfile(context.Context, *connect.Request[v1.UserGatewayServiceUpdateUserProfileRequest]) (*connect.Response[v1.UserGatewayServiceUpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserGatewayService.UpdateUserProfile is not implemented"))
}
