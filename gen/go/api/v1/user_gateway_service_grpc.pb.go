// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/user_gateway_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserGatewayService_GetUserProfile_FullMethodName    = "/api.v1.UserGatewayService/GetUserProfile"
	UserGatewayService_UpdateUserProfile_FullMethodName = "/api.v1.UserGatewayService/UpdateUserProfile"
)

// UserGatewayServiceClient is the client API for UserGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGatewayServiceClient interface {
	GetUserProfile(ctx context.Context, in *UserGatewayServiceGetUserProfileRequest, opts ...grpc.CallOption) (*UserGatewayServiceGetUserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UserGatewayServiceUpdateUserProfileRequest, opts ...grpc.CallOption) (*UserGatewayServiceUpdateUserProfileResponse, error)
}

type userGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGatewayServiceClient(cc grpc.ClientConnInterface) UserGatewayServiceClient {
	return &userGatewayServiceClient{cc}
}

func (c *userGatewayServiceClient) GetUserProfile(ctx context.Context, in *UserGatewayServiceGetUserProfileRequest, opts ...grpc.CallOption) (*UserGatewayServiceGetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGatewayServiceGetUserProfileResponse)
	err := c.cc.Invoke(ctx, UserGatewayService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGatewayServiceClient) UpdateUserProfile(ctx context.Context, in *UserGatewayServiceUpdateUserProfileRequest, opts ...grpc.CallOption) (*UserGatewayServiceUpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGatewayServiceUpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, UserGatewayService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGatewayServiceServer is the server API for UserGatewayService service.
// All implementations must embed UnimplementedUserGatewayServiceServer
// for forward compatibility.
type UserGatewayServiceServer interface {
	GetUserProfile(context.Context, *UserGatewayServiceGetUserProfileRequest) (*UserGatewayServiceGetUserProfileResponse, error)
	UpdateUserProfile(context.Context, *UserGatewayServiceUpdateUserProfileRequest) (*UserGatewayServiceUpdateUserProfileResponse, error)
	mustEmbedUnimplementedUserGatewayServiceServer()
}

// UnimplementedUserGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserGatewayServiceServer struct{}

func (UnimplementedUserGatewayServiceServer) GetUserProfile(context.Context, *UserGatewayServiceGetUserProfileRequest) (*UserGatewayServiceGetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserGatewayServiceServer) UpdateUserProfile(context.Context, *UserGatewayServiceUpdateUserProfileRequest) (*UserGatewayServiceUpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserGatewayServiceServer) mustEmbedUnimplementedUserGatewayServiceServer() {}
func (UnimplementedUserGatewayServiceServer) testEmbeddedByValue()                            {}

// UnsafeUserGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGatewayServiceServer will
// result in compilation errors.
type UnsafeUserGatewayServiceServer interface {
	mustEmbedUnimplementedUserGatewayServiceServer()
}

func RegisterUserGatewayServiceServer(s grpc.ServiceRegistrar, srv UserGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserGatewayService_ServiceDesc, srv)
}

func _UserGatewayService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGatewayServiceGetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGatewayService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServiceServer).GetUserProfile(ctx, req.(*UserGatewayServiceGetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGatewayService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGatewayServiceUpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGatewayService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServiceServer).UpdateUserProfile(ctx, req.(*UserGatewayServiceUpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGatewayService_ServiceDesc is the grpc.ServiceDesc for UserGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.UserGatewayService",
	HandlerType: (*UserGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _UserGatewayService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserGatewayService_UpdateUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/user_gateway_service.proto",
}
