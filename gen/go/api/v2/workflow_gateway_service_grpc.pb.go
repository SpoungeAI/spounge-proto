// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v2/workflow_gateway_service.proto

package apiv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowGatewayService_CreateWorkflow_FullMethodName = "/api.v2.WorkflowGatewayService/CreateWorkflow"
	WorkflowGatewayService_GetWorkflow_FullMethodName    = "/api.v2.WorkflowGatewayService/GetWorkflow"
	WorkflowGatewayService_ListWorkflows_FullMethodName  = "/api.v2.WorkflowGatewayService/ListWorkflows"
	WorkflowGatewayService_StartExecution_FullMethodName = "/api.v2.WorkflowGatewayService/StartExecution"
	WorkflowGatewayService_GetExecution_FullMethodName   = "/api.v2.WorkflowGatewayService/GetExecution"
)

// WorkflowGatewayServiceClient is the client API for WorkflowGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowGatewayServiceClient interface {
	CreateWorkflow(ctx context.Context, in *WorkflowGatewayServiceCreateWorkflowRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceCreateWorkflowResponse, error)
	GetWorkflow(ctx context.Context, in *WorkflowGatewayServiceGetWorkflowRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceGetWorkflowResponse, error)
	ListWorkflows(ctx context.Context, in *WorkflowGatewayServiceListWorkflowsRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceListWorkflowsResponse, error)
	StartExecution(ctx context.Context, in *WorkflowGatewayServiceStartExecutionRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceStartExecutionResponse, error)
	GetExecution(ctx context.Context, in *WorkflowGatewayServiceGetExecutionRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceGetExecutionResponse, error)
}

type workflowGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowGatewayServiceClient(cc grpc.ClientConnInterface) WorkflowGatewayServiceClient {
	return &workflowGatewayServiceClient{cc}
}

func (c *workflowGatewayServiceClient) CreateWorkflow(ctx context.Context, in *WorkflowGatewayServiceCreateWorkflowRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceCreateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowGatewayServiceCreateWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowGatewayService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowGatewayServiceClient) GetWorkflow(ctx context.Context, in *WorkflowGatewayServiceGetWorkflowRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceGetWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowGatewayServiceGetWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowGatewayService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowGatewayServiceClient) ListWorkflows(ctx context.Context, in *WorkflowGatewayServiceListWorkflowsRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowGatewayServiceListWorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowGatewayService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowGatewayServiceClient) StartExecution(ctx context.Context, in *WorkflowGatewayServiceStartExecutionRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceStartExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowGatewayServiceStartExecutionResponse)
	err := c.cc.Invoke(ctx, WorkflowGatewayService_StartExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowGatewayServiceClient) GetExecution(ctx context.Context, in *WorkflowGatewayServiceGetExecutionRequest, opts ...grpc.CallOption) (*WorkflowGatewayServiceGetExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowGatewayServiceGetExecutionResponse)
	err := c.cc.Invoke(ctx, WorkflowGatewayService_GetExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowGatewayServiceServer is the server API for WorkflowGatewayService service.
// All implementations must embed UnimplementedWorkflowGatewayServiceServer
// for forward compatibility.
type WorkflowGatewayServiceServer interface {
	CreateWorkflow(context.Context, *WorkflowGatewayServiceCreateWorkflowRequest) (*WorkflowGatewayServiceCreateWorkflowResponse, error)
	GetWorkflow(context.Context, *WorkflowGatewayServiceGetWorkflowRequest) (*WorkflowGatewayServiceGetWorkflowResponse, error)
	ListWorkflows(context.Context, *WorkflowGatewayServiceListWorkflowsRequest) (*WorkflowGatewayServiceListWorkflowsResponse, error)
	StartExecution(context.Context, *WorkflowGatewayServiceStartExecutionRequest) (*WorkflowGatewayServiceStartExecutionResponse, error)
	GetExecution(context.Context, *WorkflowGatewayServiceGetExecutionRequest) (*WorkflowGatewayServiceGetExecutionResponse, error)
	mustEmbedUnimplementedWorkflowGatewayServiceServer()
}

// UnimplementedWorkflowGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowGatewayServiceServer struct{}

func (UnimplementedWorkflowGatewayServiceServer) CreateWorkflow(context.Context, *WorkflowGatewayServiceCreateWorkflowRequest) (*WorkflowGatewayServiceCreateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedWorkflowGatewayServiceServer) GetWorkflow(context.Context, *WorkflowGatewayServiceGetWorkflowRequest) (*WorkflowGatewayServiceGetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowGatewayServiceServer) ListWorkflows(context.Context, *WorkflowGatewayServiceListWorkflowsRequest) (*WorkflowGatewayServiceListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowGatewayServiceServer) StartExecution(context.Context, *WorkflowGatewayServiceStartExecutionRequest) (*WorkflowGatewayServiceStartExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExecution not implemented")
}
func (UnimplementedWorkflowGatewayServiceServer) GetExecution(context.Context, *WorkflowGatewayServiceGetExecutionRequest) (*WorkflowGatewayServiceGetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (UnimplementedWorkflowGatewayServiceServer) mustEmbedUnimplementedWorkflowGatewayServiceServer() {
}
func (UnimplementedWorkflowGatewayServiceServer) testEmbeddedByValue() {}

// UnsafeWorkflowGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowGatewayServiceServer will
// result in compilation errors.
type UnsafeWorkflowGatewayServiceServer interface {
	mustEmbedUnimplementedWorkflowGatewayServiceServer()
}

func RegisterWorkflowGatewayServiceServer(s grpc.ServiceRegistrar, srv WorkflowGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkflowGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowGatewayService_ServiceDesc, srv)
}

func _WorkflowGatewayService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowGatewayServiceCreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowGatewayServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowGatewayService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowGatewayServiceServer).CreateWorkflow(ctx, req.(*WorkflowGatewayServiceCreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowGatewayService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowGatewayServiceGetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowGatewayServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowGatewayService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowGatewayServiceServer).GetWorkflow(ctx, req.(*WorkflowGatewayServiceGetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowGatewayService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowGatewayServiceListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowGatewayServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowGatewayService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowGatewayServiceServer).ListWorkflows(ctx, req.(*WorkflowGatewayServiceListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowGatewayService_StartExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowGatewayServiceStartExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowGatewayServiceServer).StartExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowGatewayService_StartExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowGatewayServiceServer).StartExecution(ctx, req.(*WorkflowGatewayServiceStartExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowGatewayService_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowGatewayServiceGetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowGatewayServiceServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowGatewayService_GetExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowGatewayServiceServer).GetExecution(ctx, req.(*WorkflowGatewayServiceGetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowGatewayService_ServiceDesc is the grpc.ServiceDesc for WorkflowGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v2.WorkflowGatewayService",
	HandlerType: (*WorkflowGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowGatewayService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowGatewayService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowGatewayService_ListWorkflows_Handler,
		},
		{
			MethodName: "StartExecution",
			Handler:    _WorkflowGatewayService_StartExecution_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _WorkflowGatewayService_GetExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/workflow_gateway_service.proto",
}
