// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: llm/v2/llm.proto

package llmv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLMProviderService_GenerateText_FullMethodName       = "/llm.v2.LLMProviderService/GenerateText"
	LLMProviderService_GenerateTextStream_FullMethodName = "/llm.v2.LLMProviderService/GenerateTextStream"
	LLMProviderService_GenerateEmbedding_FullMethodName  = "/llm.v2.LLMProviderService/GenerateEmbedding"
)

// LLMProviderServiceClient is the client API for LLMProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMProviderServiceClient interface {
	GenerateText(ctx context.Context, in *GenerateTextRequest, opts ...grpc.CallOption) (*GenerateTextResponse, error)
	GenerateTextStream(ctx context.Context, in *GenerateTextStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenerateTextStreamResponse], error)
	GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error)
}

type lLMProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMProviderServiceClient(cc grpc.ClientConnInterface) LLMProviderServiceClient {
	return &lLMProviderServiceClient{cc}
}

func (c *lLMProviderServiceClient) GenerateText(ctx context.Context, in *GenerateTextRequest, opts ...grpc.CallOption) (*GenerateTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTextResponse)
	err := c.cc.Invoke(ctx, LLMProviderService_GenerateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMProviderServiceClient) GenerateTextStream(ctx context.Context, in *GenerateTextStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenerateTextStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMProviderService_ServiceDesc.Streams[0], LLMProviderService_GenerateTextStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenerateTextStreamRequest, GenerateTextStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMProviderService_GenerateTextStreamClient = grpc.ServerStreamingClient[GenerateTextStreamResponse]

func (c *lLMProviderServiceClient) GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEmbeddingResponse)
	err := c.cc.Invoke(ctx, LLMProviderService_GenerateEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMProviderServiceServer is the server API for LLMProviderService service.
// All implementations must embed UnimplementedLLMProviderServiceServer
// for forward compatibility.
type LLMProviderServiceServer interface {
	GenerateText(context.Context, *GenerateTextRequest) (*GenerateTextResponse, error)
	GenerateTextStream(*GenerateTextStreamRequest, grpc.ServerStreamingServer[GenerateTextStreamResponse]) error
	GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error)
	mustEmbedUnimplementedLLMProviderServiceServer()
}

// UnimplementedLLMProviderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMProviderServiceServer struct{}

func (UnimplementedLLMProviderServiceServer) GenerateText(context.Context, *GenerateTextRequest) (*GenerateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateText not implemented")
}
func (UnimplementedLLMProviderServiceServer) GenerateTextStream(*GenerateTextStreamRequest, grpc.ServerStreamingServer[GenerateTextStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateTextStream not implemented")
}
func (UnimplementedLLMProviderServiceServer) GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbedding not implemented")
}
func (UnimplementedLLMProviderServiceServer) mustEmbedUnimplementedLLMProviderServiceServer() {}
func (UnimplementedLLMProviderServiceServer) testEmbeddedByValue()                            {}

// UnsafeLLMProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMProviderServiceServer will
// result in compilation errors.
type UnsafeLLMProviderServiceServer interface {
	mustEmbedUnimplementedLLMProviderServiceServer()
}

func RegisterLLMProviderServiceServer(s grpc.ServiceRegistrar, srv LLMProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedLLMProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMProviderService_ServiceDesc, srv)
}

func _LLMProviderService_GenerateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServiceServer).GenerateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProviderService_GenerateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServiceServer).GenerateText(ctx, req.(*GenerateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMProviderService_GenerateTextStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateTextStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMProviderServiceServer).GenerateTextStream(m, &grpc.GenericServerStream[GenerateTextStreamRequest, GenerateTextStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMProviderService_GenerateTextStreamServer = grpc.ServerStreamingServer[GenerateTextStreamResponse]

func _LLMProviderService_GenerateEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProviderServiceServer).GenerateEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProviderService_GenerateEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProviderServiceServer).GenerateEmbedding(ctx, req.(*GenerateEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMProviderService_ServiceDesc is the grpc.ServiceDesc for LLMProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llm.v2.LLMProviderService",
	HandlerType: (*LLMProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateText",
			Handler:    _LLMProviderService_GenerateText_Handler,
		},
		{
			MethodName: "GenerateEmbedding",
			Handler:    _LLMProviderService_GenerateEmbedding_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateTextStream",
			Handler:       _LLMProviderService_GenerateTextStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llm/v2/llm.proto",
}
