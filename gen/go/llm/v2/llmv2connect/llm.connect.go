// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: llm/v2/llm.proto

package llmv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/spounge-ai/spounge-proto/gen/go/llm/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LLMProviderServiceName is the fully-qualified name of the LLMProviderService service.
	LLMProviderServiceName = "llm.v2.LLMProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LLMProviderServiceGenerateTextProcedure is the fully-qualified name of the LLMProviderService's
	// GenerateText RPC.
	LLMProviderServiceGenerateTextProcedure = "/llm.v2.LLMProviderService/GenerateText"
	// LLMProviderServiceGenerateTextStreamProcedure is the fully-qualified name of the
	// LLMProviderService's GenerateTextStream RPC.
	LLMProviderServiceGenerateTextStreamProcedure = "/llm.v2.LLMProviderService/GenerateTextStream"
	// LLMProviderServiceGenerateEmbeddingProcedure is the fully-qualified name of the
	// LLMProviderService's GenerateEmbedding RPC.
	LLMProviderServiceGenerateEmbeddingProcedure = "/llm.v2.LLMProviderService/GenerateEmbedding"
)

// LLMProviderServiceClient is a client for the llm.v2.LLMProviderService service.
type LLMProviderServiceClient interface {
	GenerateText(context.Context, *connect.Request[v2.GenerateTextRequest]) (*connect.Response[v2.GenerateTextResponse], error)
	GenerateTextStream(context.Context, *connect.Request[v2.GenerateTextStreamRequest]) (*connect.ServerStreamForClient[v2.GenerateTextStreamResponse], error)
	GenerateEmbedding(context.Context, *connect.Request[v2.GenerateEmbeddingRequest]) (*connect.Response[v2.GenerateEmbeddingResponse], error)
}

// NewLLMProviderServiceClient constructs a client for the llm.v2.LLMProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLLMProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LLMProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	lLMProviderServiceMethods := v2.File_llm_v2_llm_proto.Services().ByName("LLMProviderService").Methods()
	return &lLMProviderServiceClient{
		generateText: connect.NewClient[v2.GenerateTextRequest, v2.GenerateTextResponse](
			httpClient,
			baseURL+LLMProviderServiceGenerateTextProcedure,
			connect.WithSchema(lLMProviderServiceMethods.ByName("GenerateText")),
			connect.WithClientOptions(opts...),
		),
		generateTextStream: connect.NewClient[v2.GenerateTextStreamRequest, v2.GenerateTextStreamResponse](
			httpClient,
			baseURL+LLMProviderServiceGenerateTextStreamProcedure,
			connect.WithSchema(lLMProviderServiceMethods.ByName("GenerateTextStream")),
			connect.WithClientOptions(opts...),
		),
		generateEmbedding: connect.NewClient[v2.GenerateEmbeddingRequest, v2.GenerateEmbeddingResponse](
			httpClient,
			baseURL+LLMProviderServiceGenerateEmbeddingProcedure,
			connect.WithSchema(lLMProviderServiceMethods.ByName("GenerateEmbedding")),
			connect.WithClientOptions(opts...),
		),
	}
}

// lLMProviderServiceClient implements LLMProviderServiceClient.
type lLMProviderServiceClient struct {
	generateText       *connect.Client[v2.GenerateTextRequest, v2.GenerateTextResponse]
	generateTextStream *connect.Client[v2.GenerateTextStreamRequest, v2.GenerateTextStreamResponse]
	generateEmbedding  *connect.Client[v2.GenerateEmbeddingRequest, v2.GenerateEmbeddingResponse]
}

// GenerateText calls llm.v2.LLMProviderService.GenerateText.
func (c *lLMProviderServiceClient) GenerateText(ctx context.Context, req *connect.Request[v2.GenerateTextRequest]) (*connect.Response[v2.GenerateTextResponse], error) {
	return c.generateText.CallUnary(ctx, req)
}

// GenerateTextStream calls llm.v2.LLMProviderService.GenerateTextStream.
func (c *lLMProviderServiceClient) GenerateTextStream(ctx context.Context, req *connect.Request[v2.GenerateTextStreamRequest]) (*connect.ServerStreamForClient[v2.GenerateTextStreamResponse], error) {
	return c.generateTextStream.CallServerStream(ctx, req)
}

// GenerateEmbedding calls llm.v2.LLMProviderService.GenerateEmbedding.
func (c *lLMProviderServiceClient) GenerateEmbedding(ctx context.Context, req *connect.Request[v2.GenerateEmbeddingRequest]) (*connect.Response[v2.GenerateEmbeddingResponse], error) {
	return c.generateEmbedding.CallUnary(ctx, req)
}

// LLMProviderServiceHandler is an implementation of the llm.v2.LLMProviderService service.
type LLMProviderServiceHandler interface {
	GenerateText(context.Context, *connect.Request[v2.GenerateTextRequest]) (*connect.Response[v2.GenerateTextResponse], error)
	GenerateTextStream(context.Context, *connect.Request[v2.GenerateTextStreamRequest], *connect.ServerStream[v2.GenerateTextStreamResponse]) error
	GenerateEmbedding(context.Context, *connect.Request[v2.GenerateEmbeddingRequest]) (*connect.Response[v2.GenerateEmbeddingResponse], error)
}

// NewLLMProviderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLLMProviderServiceHandler(svc LLMProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lLMProviderServiceMethods := v2.File_llm_v2_llm_proto.Services().ByName("LLMProviderService").Methods()
	lLMProviderServiceGenerateTextHandler := connect.NewUnaryHandler(
		LLMProviderServiceGenerateTextProcedure,
		svc.GenerateText,
		connect.WithSchema(lLMProviderServiceMethods.ByName("GenerateText")),
		connect.WithHandlerOptions(opts...),
	)
	lLMProviderServiceGenerateTextStreamHandler := connect.NewServerStreamHandler(
		LLMProviderServiceGenerateTextStreamProcedure,
		svc.GenerateTextStream,
		connect.WithSchema(lLMProviderServiceMethods.ByName("GenerateTextStream")),
		connect.WithHandlerOptions(opts...),
	)
	lLMProviderServiceGenerateEmbeddingHandler := connect.NewUnaryHandler(
		LLMProviderServiceGenerateEmbeddingProcedure,
		svc.GenerateEmbedding,
		connect.WithSchema(lLMProviderServiceMethods.ByName("GenerateEmbedding")),
		connect.WithHandlerOptions(opts...),
	)
	return "/llm.v2.LLMProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LLMProviderServiceGenerateTextProcedure:
			lLMProviderServiceGenerateTextHandler.ServeHTTP(w, r)
		case LLMProviderServiceGenerateTextStreamProcedure:
			lLMProviderServiceGenerateTextStreamHandler.ServeHTTP(w, r)
		case LLMProviderServiceGenerateEmbeddingProcedure:
			lLMProviderServiceGenerateEmbeddingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLLMProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLLMProviderServiceHandler struct{}

func (UnimplementedLLMProviderServiceHandler) GenerateText(context.Context, *connect.Request[v2.GenerateTextRequest]) (*connect.Response[v2.GenerateTextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v2.LLMProviderService.GenerateText is not implemented"))
}

func (UnimplementedLLMProviderServiceHandler) GenerateTextStream(context.Context, *connect.Request[v2.GenerateTextStreamRequest], *connect.ServerStream[v2.GenerateTextStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("llm.v2.LLMProviderService.GenerateTextStream is not implemented"))
}

func (UnimplementedLLMProviderServiceHandler) GenerateEmbedding(context.Context, *connect.Request[v2.GenerateEmbeddingRequest]) (*connect.Response[v2.GenerateEmbeddingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("llm.v2.LLMProviderService.GenerateEmbedding is not implemented"))
}
