// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nodus/v1/service/v1/service.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/mcp/v1"
	v1 "github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/nodes/v1"
	v12 "github.com/spounge-ai/spounge-proto/gen/go/nodus/v1/service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodusServiceName is the fully-qualified name of the NodusService service.
	NodusServiceName = "nodus.v1.service.v1.NodusService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodusServiceExecuteNodeProcedure is the fully-qualified name of the NodusService's ExecuteNode
	// RPC.
	NodusServiceExecuteNodeProcedure = "/nodus.v1.service.v1.NodusService/ExecuteNode"
	// NodusServiceExecuteNodeStreamProcedure is the fully-qualified name of the NodusService's
	// ExecuteNodeStream RPC.
	NodusServiceExecuteNodeStreamProcedure = "/nodus.v1.service.v1.NodusService/ExecuteNodeStream"
	// NodusServiceRegisterMCPServerProcedure is the fully-qualified name of the NodusService's
	// RegisterMCPServer RPC.
	NodusServiceRegisterMCPServerProcedure = "/nodus.v1.service.v1.NodusService/RegisterMCPServer"
	// NodusServiceListMCPServersProcedure is the fully-qualified name of the NodusService's
	// ListMCPServers RPC.
	NodusServiceListMCPServersProcedure = "/nodus.v1.service.v1.NodusService/ListMCPServers"
	// NodusServiceQueryMCPToolsProcedure is the fully-qualified name of the NodusService's
	// QueryMCPTools RPC.
	NodusServiceQueryMCPToolsProcedure = "/nodus.v1.service.v1.NodusService/QueryMCPTools"
	// NodusServiceCheckHealthProcedure is the fully-qualified name of the NodusService's CheckHealth
	// RPC.
	NodusServiceCheckHealthProcedure = "/nodus.v1.service.v1.NodusService/CheckHealth"
)

// NodusServiceClient is a client for the nodus.v1.service.v1.NodusService service.
type NodusServiceClient interface {
	ExecuteNode(context.Context, *connect.Request[v1.ExecuteNodeRequest]) (*connect.Response[v1.ExecuteNodeResponse], error)
	ExecuteNodeStream(context.Context, *connect.Request[v1.ExecuteNodeStreamRequest]) (*connect.ServerStreamForClient[v1.ExecuteNodeStreamResponse], error)
	RegisterMCPServer(context.Context, *connect.Request[v11.RegisterMCPServerRequest]) (*connect.Response[v11.RegisterMCPServerResponse], error)
	ListMCPServers(context.Context, *connect.Request[v11.ListMCPServersRequest]) (*connect.Response[v11.ListMCPServersResponse], error)
	QueryMCPTools(context.Context, *connect.Request[v11.QueryMCPToolsRequest]) (*connect.Response[v11.QueryMCPToolsResponse], error)
	CheckHealth(context.Context, *connect.Request[v12.CheckHealthRequest]) (*connect.Response[v12.CheckHealthResponse], error)
}

// NewNodusServiceClient constructs a client for the nodus.v1.service.v1.NodusService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodusServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodusServiceMethods := v12.File_nodus_v1_service_v1_service_proto.Services().ByName("NodusService").Methods()
	return &nodusServiceClient{
		executeNode: connect.NewClient[v1.ExecuteNodeRequest, v1.ExecuteNodeResponse](
			httpClient,
			baseURL+NodusServiceExecuteNodeProcedure,
			connect.WithSchema(nodusServiceMethods.ByName("ExecuteNode")),
			connect.WithClientOptions(opts...),
		),
		executeNodeStream: connect.NewClient[v1.ExecuteNodeStreamRequest, v1.ExecuteNodeStreamResponse](
			httpClient,
			baseURL+NodusServiceExecuteNodeStreamProcedure,
			connect.WithSchema(nodusServiceMethods.ByName("ExecuteNodeStream")),
			connect.WithClientOptions(opts...),
		),
		registerMCPServer: connect.NewClient[v11.RegisterMCPServerRequest, v11.RegisterMCPServerResponse](
			httpClient,
			baseURL+NodusServiceRegisterMCPServerProcedure,
			connect.WithSchema(nodusServiceMethods.ByName("RegisterMCPServer")),
			connect.WithClientOptions(opts...),
		),
		listMCPServers: connect.NewClient[v11.ListMCPServersRequest, v11.ListMCPServersResponse](
			httpClient,
			baseURL+NodusServiceListMCPServersProcedure,
			connect.WithSchema(nodusServiceMethods.ByName("ListMCPServers")),
			connect.WithClientOptions(opts...),
		),
		queryMCPTools: connect.NewClient[v11.QueryMCPToolsRequest, v11.QueryMCPToolsResponse](
			httpClient,
			baseURL+NodusServiceQueryMCPToolsProcedure,
			connect.WithSchema(nodusServiceMethods.ByName("QueryMCPTools")),
			connect.WithClientOptions(opts...),
		),
		checkHealth: connect.NewClient[v12.CheckHealthRequest, v12.CheckHealthResponse](
			httpClient,
			baseURL+NodusServiceCheckHealthProcedure,
			connect.WithSchema(nodusServiceMethods.ByName("CheckHealth")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodusServiceClient implements NodusServiceClient.
type nodusServiceClient struct {
	executeNode       *connect.Client[v1.ExecuteNodeRequest, v1.ExecuteNodeResponse]
	executeNodeStream *connect.Client[v1.ExecuteNodeStreamRequest, v1.ExecuteNodeStreamResponse]
	registerMCPServer *connect.Client[v11.RegisterMCPServerRequest, v11.RegisterMCPServerResponse]
	listMCPServers    *connect.Client[v11.ListMCPServersRequest, v11.ListMCPServersResponse]
	queryMCPTools     *connect.Client[v11.QueryMCPToolsRequest, v11.QueryMCPToolsResponse]
	checkHealth       *connect.Client[v12.CheckHealthRequest, v12.CheckHealthResponse]
}

// ExecuteNode calls nodus.v1.service.v1.NodusService.ExecuteNode.
func (c *nodusServiceClient) ExecuteNode(ctx context.Context, req *connect.Request[v1.ExecuteNodeRequest]) (*connect.Response[v1.ExecuteNodeResponse], error) {
	return c.executeNode.CallUnary(ctx, req)
}

// ExecuteNodeStream calls nodus.v1.service.v1.NodusService.ExecuteNodeStream.
func (c *nodusServiceClient) ExecuteNodeStream(ctx context.Context, req *connect.Request[v1.ExecuteNodeStreamRequest]) (*connect.ServerStreamForClient[v1.ExecuteNodeStreamResponse], error) {
	return c.executeNodeStream.CallServerStream(ctx, req)
}

// RegisterMCPServer calls nodus.v1.service.v1.NodusService.RegisterMCPServer.
func (c *nodusServiceClient) RegisterMCPServer(ctx context.Context, req *connect.Request[v11.RegisterMCPServerRequest]) (*connect.Response[v11.RegisterMCPServerResponse], error) {
	return c.registerMCPServer.CallUnary(ctx, req)
}

// ListMCPServers calls nodus.v1.service.v1.NodusService.ListMCPServers.
func (c *nodusServiceClient) ListMCPServers(ctx context.Context, req *connect.Request[v11.ListMCPServersRequest]) (*connect.Response[v11.ListMCPServersResponse], error) {
	return c.listMCPServers.CallUnary(ctx, req)
}

// QueryMCPTools calls nodus.v1.service.v1.NodusService.QueryMCPTools.
func (c *nodusServiceClient) QueryMCPTools(ctx context.Context, req *connect.Request[v11.QueryMCPToolsRequest]) (*connect.Response[v11.QueryMCPToolsResponse], error) {
	return c.queryMCPTools.CallUnary(ctx, req)
}

// CheckHealth calls nodus.v1.service.v1.NodusService.CheckHealth.
func (c *nodusServiceClient) CheckHealth(ctx context.Context, req *connect.Request[v12.CheckHealthRequest]) (*connect.Response[v12.CheckHealthResponse], error) {
	return c.checkHealth.CallUnary(ctx, req)
}

// NodusServiceHandler is an implementation of the nodus.v1.service.v1.NodusService service.
type NodusServiceHandler interface {
	ExecuteNode(context.Context, *connect.Request[v1.ExecuteNodeRequest]) (*connect.Response[v1.ExecuteNodeResponse], error)
	ExecuteNodeStream(context.Context, *connect.Request[v1.ExecuteNodeStreamRequest], *connect.ServerStream[v1.ExecuteNodeStreamResponse]) error
	RegisterMCPServer(context.Context, *connect.Request[v11.RegisterMCPServerRequest]) (*connect.Response[v11.RegisterMCPServerResponse], error)
	ListMCPServers(context.Context, *connect.Request[v11.ListMCPServersRequest]) (*connect.Response[v11.ListMCPServersResponse], error)
	QueryMCPTools(context.Context, *connect.Request[v11.QueryMCPToolsRequest]) (*connect.Response[v11.QueryMCPToolsResponse], error)
	CheckHealth(context.Context, *connect.Request[v12.CheckHealthRequest]) (*connect.Response[v12.CheckHealthResponse], error)
}

// NewNodusServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodusServiceHandler(svc NodusServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodusServiceMethods := v12.File_nodus_v1_service_v1_service_proto.Services().ByName("NodusService").Methods()
	nodusServiceExecuteNodeHandler := connect.NewUnaryHandler(
		NodusServiceExecuteNodeProcedure,
		svc.ExecuteNode,
		connect.WithSchema(nodusServiceMethods.ByName("ExecuteNode")),
		connect.WithHandlerOptions(opts...),
	)
	nodusServiceExecuteNodeStreamHandler := connect.NewServerStreamHandler(
		NodusServiceExecuteNodeStreamProcedure,
		svc.ExecuteNodeStream,
		connect.WithSchema(nodusServiceMethods.ByName("ExecuteNodeStream")),
		connect.WithHandlerOptions(opts...),
	)
	nodusServiceRegisterMCPServerHandler := connect.NewUnaryHandler(
		NodusServiceRegisterMCPServerProcedure,
		svc.RegisterMCPServer,
		connect.WithSchema(nodusServiceMethods.ByName("RegisterMCPServer")),
		connect.WithHandlerOptions(opts...),
	)
	nodusServiceListMCPServersHandler := connect.NewUnaryHandler(
		NodusServiceListMCPServersProcedure,
		svc.ListMCPServers,
		connect.WithSchema(nodusServiceMethods.ByName("ListMCPServers")),
		connect.WithHandlerOptions(opts...),
	)
	nodusServiceQueryMCPToolsHandler := connect.NewUnaryHandler(
		NodusServiceQueryMCPToolsProcedure,
		svc.QueryMCPTools,
		connect.WithSchema(nodusServiceMethods.ByName("QueryMCPTools")),
		connect.WithHandlerOptions(opts...),
	)
	nodusServiceCheckHealthHandler := connect.NewUnaryHandler(
		NodusServiceCheckHealthProcedure,
		svc.CheckHealth,
		connect.WithSchema(nodusServiceMethods.ByName("CheckHealth")),
		connect.WithHandlerOptions(opts...),
	)
	return "/nodus.v1.service.v1.NodusService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodusServiceExecuteNodeProcedure:
			nodusServiceExecuteNodeHandler.ServeHTTP(w, r)
		case NodusServiceExecuteNodeStreamProcedure:
			nodusServiceExecuteNodeStreamHandler.ServeHTTP(w, r)
		case NodusServiceRegisterMCPServerProcedure:
			nodusServiceRegisterMCPServerHandler.ServeHTTP(w, r)
		case NodusServiceListMCPServersProcedure:
			nodusServiceListMCPServersHandler.ServeHTTP(w, r)
		case NodusServiceQueryMCPToolsProcedure:
			nodusServiceQueryMCPToolsHandler.ServeHTTP(w, r)
		case NodusServiceCheckHealthProcedure:
			nodusServiceCheckHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodusServiceHandler struct{}

func (UnimplementedNodusServiceHandler) ExecuteNode(context.Context, *connect.Request[v1.ExecuteNodeRequest]) (*connect.Response[v1.ExecuteNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodus.v1.service.v1.NodusService.ExecuteNode is not implemented"))
}

func (UnimplementedNodusServiceHandler) ExecuteNodeStream(context.Context, *connect.Request[v1.ExecuteNodeStreamRequest], *connect.ServerStream[v1.ExecuteNodeStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("nodus.v1.service.v1.NodusService.ExecuteNodeStream is not implemented"))
}

func (UnimplementedNodusServiceHandler) RegisterMCPServer(context.Context, *connect.Request[v11.RegisterMCPServerRequest]) (*connect.Response[v11.RegisterMCPServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodus.v1.service.v1.NodusService.RegisterMCPServer is not implemented"))
}

func (UnimplementedNodusServiceHandler) ListMCPServers(context.Context, *connect.Request[v11.ListMCPServersRequest]) (*connect.Response[v11.ListMCPServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodus.v1.service.v1.NodusService.ListMCPServers is not implemented"))
}

func (UnimplementedNodusServiceHandler) QueryMCPTools(context.Context, *connect.Request[v11.QueryMCPToolsRequest]) (*connect.Response[v11.QueryMCPToolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodus.v1.service.v1.NodusService.QueryMCPTools is not implemented"))
}

func (UnimplementedNodusServiceHandler) CheckHealth(context.Context, *connect.Request[v12.CheckHealthRequest]) (*connect.Response[v12.CheckHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodus.v1.service.v1.NodusService.CheckHealth is not implemented"))
}
