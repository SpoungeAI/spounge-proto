// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: polykey/v2/polykey_service.proto

package polykeyv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PolykeyService_ExecuteTool_FullMethodName = "/polykey.v2.PolykeyService/ExecuteTool"
)

// PolykeyServiceClient is the client API for PolykeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolykeyServiceClient interface {
	ExecuteTool(ctx context.Context, in *ExecuteToolRequest, opts ...grpc.CallOption) (*ExecuteToolResponse, error)
}

type polykeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolykeyServiceClient(cc grpc.ClientConnInterface) PolykeyServiceClient {
	return &polykeyServiceClient{cc}
}

func (c *polykeyServiceClient) ExecuteTool(ctx context.Context, in *ExecuteToolRequest, opts ...grpc.CallOption) (*ExecuteToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteToolResponse)
	err := c.cc.Invoke(ctx, PolykeyService_ExecuteTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolykeyServiceServer is the server API for PolykeyService service.
// All implementations must embed UnimplementedPolykeyServiceServer
// for forward compatibility.
type PolykeyServiceServer interface {
	ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error)
	mustEmbedUnimplementedPolykeyServiceServer()
}

// UnimplementedPolykeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolykeyServiceServer struct{}

func (UnimplementedPolykeyServiceServer) ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTool not implemented")
}
func (UnimplementedPolykeyServiceServer) mustEmbedUnimplementedPolykeyServiceServer() {}
func (UnimplementedPolykeyServiceServer) testEmbeddedByValue()                        {}

// UnsafePolykeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolykeyServiceServer will
// result in compilation errors.
type UnsafePolykeyServiceServer interface {
	mustEmbedUnimplementedPolykeyServiceServer()
}

func RegisterPolykeyServiceServer(s grpc.ServiceRegistrar, srv PolykeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPolykeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PolykeyService_ServiceDesc, srv)
}

func _PolykeyService_ExecuteTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolykeyServiceServer).ExecuteTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolykeyService_ExecuteTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolykeyServiceServer).ExecuteTool(ctx, req.(*ExecuteToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolykeyService_ServiceDesc is the grpc.ServiceDesc for PolykeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolykeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polykey.v2.PolykeyService",
	HandlerType: (*PolykeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTool",
			Handler:    _PolykeyService_ExecuteTool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polykey/v2/polykey_service.proto",
}
