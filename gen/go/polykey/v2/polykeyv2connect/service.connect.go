// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: polykey/v2/service.proto

package polykeyv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/spounge-ai/spounge-proto/gen/go/polykey/v2"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PolykeyServiceName is the fully-qualified name of the PolykeyService service.
	PolykeyServiceName = "polykey.v2.PolykeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PolykeyServiceGetKeyProcedure is the fully-qualified name of the PolykeyService's GetKey RPC.
	PolykeyServiceGetKeyProcedure = "/polykey.v2.PolykeyService/GetKey"
	// PolykeyServiceListKeysProcedure is the fully-qualified name of the PolykeyService's ListKeys RPC.
	PolykeyServiceListKeysProcedure = "/polykey.v2.PolykeyService/ListKeys"
	// PolykeyServiceCreateKeyProcedure is the fully-qualified name of the PolykeyService's CreateKey
	// RPC.
	PolykeyServiceCreateKeyProcedure = "/polykey.v2.PolykeyService/CreateKey"
	// PolykeyServiceRotateKeyProcedure is the fully-qualified name of the PolykeyService's RotateKey
	// RPC.
	PolykeyServiceRotateKeyProcedure = "/polykey.v2.PolykeyService/RotateKey"
	// PolykeyServiceRevokeKeyProcedure is the fully-qualified name of the PolykeyService's RevokeKey
	// RPC.
	PolykeyServiceRevokeKeyProcedure = "/polykey.v2.PolykeyService/RevokeKey"
	// PolykeyServiceUpdateKeyMetadataProcedure is the fully-qualified name of the PolykeyService's
	// UpdateKeyMetadata RPC.
	PolykeyServiceUpdateKeyMetadataProcedure = "/polykey.v2.PolykeyService/UpdateKeyMetadata"
	// PolykeyServiceGetKeyMetadataProcedure is the fully-qualified name of the PolykeyService's
	// GetKeyMetadata RPC.
	PolykeyServiceGetKeyMetadataProcedure = "/polykey.v2.PolykeyService/GetKeyMetadata"
	// PolykeyServiceHealthCheckProcedure is the fully-qualified name of the PolykeyService's
	// HealthCheck RPC.
	PolykeyServiceHealthCheckProcedure = "/polykey.v2.PolykeyService/HealthCheck"
)

// PolykeyServiceClient is a client for the polykey.v2.PolykeyService service.
type PolykeyServiceClient interface {
	GetKey(context.Context, *connect.Request[v2.GetKeyRequest]) (*connect.Response[v2.GetKeyResponse], error)
	ListKeys(context.Context, *connect.Request[v2.ListKeysRequest]) (*connect.Response[v2.ListKeysResponse], error)
	CreateKey(context.Context, *connect.Request[v2.CreateKeyRequest]) (*connect.Response[v2.CreateKeyResponse], error)
	RotateKey(context.Context, *connect.Request[v2.RotateKeyRequest]) (*connect.Response[v2.RotateKeyResponse], error)
	RevokeKey(context.Context, *connect.Request[v2.RevokeKeyRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateKeyMetadata(context.Context, *connect.Request[v2.UpdateKeyMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	GetKeyMetadata(context.Context, *connect.Request[v2.GetKeyMetadataRequest]) (*connect.Response[v2.GetKeyMetadataResponse], error)
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v2.HealthCheckResponse], error)
}

// NewPolykeyServiceClient constructs a client for the polykey.v2.PolykeyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolykeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PolykeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	polykeyServiceMethods := v2.File_polykey_v2_service_proto.Services().ByName("PolykeyService").Methods()
	return &polykeyServiceClient{
		getKey: connect.NewClient[v2.GetKeyRequest, v2.GetKeyResponse](
			httpClient,
			baseURL+PolykeyServiceGetKeyProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("GetKey")),
			connect.WithClientOptions(opts...),
		),
		listKeys: connect.NewClient[v2.ListKeysRequest, v2.ListKeysResponse](
			httpClient,
			baseURL+PolykeyServiceListKeysProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("ListKeys")),
			connect.WithClientOptions(opts...),
		),
		createKey: connect.NewClient[v2.CreateKeyRequest, v2.CreateKeyResponse](
			httpClient,
			baseURL+PolykeyServiceCreateKeyProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("CreateKey")),
			connect.WithClientOptions(opts...),
		),
		rotateKey: connect.NewClient[v2.RotateKeyRequest, v2.RotateKeyResponse](
			httpClient,
			baseURL+PolykeyServiceRotateKeyProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("RotateKey")),
			connect.WithClientOptions(opts...),
		),
		revokeKey: connect.NewClient[v2.RevokeKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+PolykeyServiceRevokeKeyProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("RevokeKey")),
			connect.WithClientOptions(opts...),
		),
		updateKeyMetadata: connect.NewClient[v2.UpdateKeyMetadataRequest, emptypb.Empty](
			httpClient,
			baseURL+PolykeyServiceUpdateKeyMetadataProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("UpdateKeyMetadata")),
			connect.WithClientOptions(opts...),
		),
		getKeyMetadata: connect.NewClient[v2.GetKeyMetadataRequest, v2.GetKeyMetadataResponse](
			httpClient,
			baseURL+PolykeyServiceGetKeyMetadataProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("GetKeyMetadata")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[emptypb.Empty, v2.HealthCheckResponse](
			httpClient,
			baseURL+PolykeyServiceHealthCheckProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// polykeyServiceClient implements PolykeyServiceClient.
type polykeyServiceClient struct {
	getKey            *connect.Client[v2.GetKeyRequest, v2.GetKeyResponse]
	listKeys          *connect.Client[v2.ListKeysRequest, v2.ListKeysResponse]
	createKey         *connect.Client[v2.CreateKeyRequest, v2.CreateKeyResponse]
	rotateKey         *connect.Client[v2.RotateKeyRequest, v2.RotateKeyResponse]
	revokeKey         *connect.Client[v2.RevokeKeyRequest, emptypb.Empty]
	updateKeyMetadata *connect.Client[v2.UpdateKeyMetadataRequest, emptypb.Empty]
	getKeyMetadata    *connect.Client[v2.GetKeyMetadataRequest, v2.GetKeyMetadataResponse]
	healthCheck       *connect.Client[emptypb.Empty, v2.HealthCheckResponse]
}

// GetKey calls polykey.v2.PolykeyService.GetKey.
func (c *polykeyServiceClient) GetKey(ctx context.Context, req *connect.Request[v2.GetKeyRequest]) (*connect.Response[v2.GetKeyResponse], error) {
	return c.getKey.CallUnary(ctx, req)
}

// ListKeys calls polykey.v2.PolykeyService.ListKeys.
func (c *polykeyServiceClient) ListKeys(ctx context.Context, req *connect.Request[v2.ListKeysRequest]) (*connect.Response[v2.ListKeysResponse], error) {
	return c.listKeys.CallUnary(ctx, req)
}

// CreateKey calls polykey.v2.PolykeyService.CreateKey.
func (c *polykeyServiceClient) CreateKey(ctx context.Context, req *connect.Request[v2.CreateKeyRequest]) (*connect.Response[v2.CreateKeyResponse], error) {
	return c.createKey.CallUnary(ctx, req)
}

// RotateKey calls polykey.v2.PolykeyService.RotateKey.
func (c *polykeyServiceClient) RotateKey(ctx context.Context, req *connect.Request[v2.RotateKeyRequest]) (*connect.Response[v2.RotateKeyResponse], error) {
	return c.rotateKey.CallUnary(ctx, req)
}

// RevokeKey calls polykey.v2.PolykeyService.RevokeKey.
func (c *polykeyServiceClient) RevokeKey(ctx context.Context, req *connect.Request[v2.RevokeKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeKey.CallUnary(ctx, req)
}

// UpdateKeyMetadata calls polykey.v2.PolykeyService.UpdateKeyMetadata.
func (c *polykeyServiceClient) UpdateKeyMetadata(ctx context.Context, req *connect.Request[v2.UpdateKeyMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateKeyMetadata.CallUnary(ctx, req)
}

// GetKeyMetadata calls polykey.v2.PolykeyService.GetKeyMetadata.
func (c *polykeyServiceClient) GetKeyMetadata(ctx context.Context, req *connect.Request[v2.GetKeyMetadataRequest]) (*connect.Response[v2.GetKeyMetadataResponse], error) {
	return c.getKeyMetadata.CallUnary(ctx, req)
}

// HealthCheck calls polykey.v2.PolykeyService.HealthCheck.
func (c *polykeyServiceClient) HealthCheck(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v2.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// PolykeyServiceHandler is an implementation of the polykey.v2.PolykeyService service.
type PolykeyServiceHandler interface {
	GetKey(context.Context, *connect.Request[v2.GetKeyRequest]) (*connect.Response[v2.GetKeyResponse], error)
	ListKeys(context.Context, *connect.Request[v2.ListKeysRequest]) (*connect.Response[v2.ListKeysResponse], error)
	CreateKey(context.Context, *connect.Request[v2.CreateKeyRequest]) (*connect.Response[v2.CreateKeyResponse], error)
	RotateKey(context.Context, *connect.Request[v2.RotateKeyRequest]) (*connect.Response[v2.RotateKeyResponse], error)
	RevokeKey(context.Context, *connect.Request[v2.RevokeKeyRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateKeyMetadata(context.Context, *connect.Request[v2.UpdateKeyMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	GetKeyMetadata(context.Context, *connect.Request[v2.GetKeyMetadataRequest]) (*connect.Response[v2.GetKeyMetadataResponse], error)
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v2.HealthCheckResponse], error)
}

// NewPolykeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolykeyServiceHandler(svc PolykeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	polykeyServiceMethods := v2.File_polykey_v2_service_proto.Services().ByName("PolykeyService").Methods()
	polykeyServiceGetKeyHandler := connect.NewUnaryHandler(
		PolykeyServiceGetKeyProcedure,
		svc.GetKey,
		connect.WithSchema(polykeyServiceMethods.ByName("GetKey")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceListKeysHandler := connect.NewUnaryHandler(
		PolykeyServiceListKeysProcedure,
		svc.ListKeys,
		connect.WithSchema(polykeyServiceMethods.ByName("ListKeys")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceCreateKeyHandler := connect.NewUnaryHandler(
		PolykeyServiceCreateKeyProcedure,
		svc.CreateKey,
		connect.WithSchema(polykeyServiceMethods.ByName("CreateKey")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceRotateKeyHandler := connect.NewUnaryHandler(
		PolykeyServiceRotateKeyProcedure,
		svc.RotateKey,
		connect.WithSchema(polykeyServiceMethods.ByName("RotateKey")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceRevokeKeyHandler := connect.NewUnaryHandler(
		PolykeyServiceRevokeKeyProcedure,
		svc.RevokeKey,
		connect.WithSchema(polykeyServiceMethods.ByName("RevokeKey")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceUpdateKeyMetadataHandler := connect.NewUnaryHandler(
		PolykeyServiceUpdateKeyMetadataProcedure,
		svc.UpdateKeyMetadata,
		connect.WithSchema(polykeyServiceMethods.ByName("UpdateKeyMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceGetKeyMetadataHandler := connect.NewUnaryHandler(
		PolykeyServiceGetKeyMetadataProcedure,
		svc.GetKeyMetadata,
		connect.WithSchema(polykeyServiceMethods.ByName("GetKeyMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	polykeyServiceHealthCheckHandler := connect.NewUnaryHandler(
		PolykeyServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(polykeyServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/polykey.v2.PolykeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PolykeyServiceGetKeyProcedure:
			polykeyServiceGetKeyHandler.ServeHTTP(w, r)
		case PolykeyServiceListKeysProcedure:
			polykeyServiceListKeysHandler.ServeHTTP(w, r)
		case PolykeyServiceCreateKeyProcedure:
			polykeyServiceCreateKeyHandler.ServeHTTP(w, r)
		case PolykeyServiceRotateKeyProcedure:
			polykeyServiceRotateKeyHandler.ServeHTTP(w, r)
		case PolykeyServiceRevokeKeyProcedure:
			polykeyServiceRevokeKeyHandler.ServeHTTP(w, r)
		case PolykeyServiceUpdateKeyMetadataProcedure:
			polykeyServiceUpdateKeyMetadataHandler.ServeHTTP(w, r)
		case PolykeyServiceGetKeyMetadataProcedure:
			polykeyServiceGetKeyMetadataHandler.ServeHTTP(w, r)
		case PolykeyServiceHealthCheckProcedure:
			polykeyServiceHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPolykeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolykeyServiceHandler struct{}

func (UnimplementedPolykeyServiceHandler) GetKey(context.Context, *connect.Request[v2.GetKeyRequest]) (*connect.Response[v2.GetKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.GetKey is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) ListKeys(context.Context, *connect.Request[v2.ListKeysRequest]) (*connect.Response[v2.ListKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.ListKeys is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) CreateKey(context.Context, *connect.Request[v2.CreateKeyRequest]) (*connect.Response[v2.CreateKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.CreateKey is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) RotateKey(context.Context, *connect.Request[v2.RotateKeyRequest]) (*connect.Response[v2.RotateKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.RotateKey is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) RevokeKey(context.Context, *connect.Request[v2.RevokeKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.RevokeKey is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) UpdateKeyMetadata(context.Context, *connect.Request[v2.UpdateKeyMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.UpdateKeyMetadata is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) GetKeyMetadata(context.Context, *connect.Request[v2.GetKeyMetadataRequest]) (*connect.Response[v2.GetKeyMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.GetKeyMetadata is not implemented"))
}

func (UnimplementedPolykeyServiceHandler) HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v2.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.HealthCheck is not implemented"))
}
