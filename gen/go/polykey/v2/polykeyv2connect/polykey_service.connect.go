// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: polykey/v2/polykey_service.proto

package polykeyv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/spounge-ai/spounge-proto/gen/go/polykey/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PolykeyServiceName is the fully-qualified name of the PolykeyService service.
	PolykeyServiceName = "polykey.v2.PolykeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PolykeyServiceExecuteToolProcedure is the fully-qualified name of the PolykeyService's
	// ExecuteTool RPC.
	PolykeyServiceExecuteToolProcedure = "/polykey.v2.PolykeyService/ExecuteTool"
)

// PolykeyServiceClient is a client for the polykey.v2.PolykeyService service.
type PolykeyServiceClient interface {
	ExecuteTool(context.Context, *connect.Request[v2.ExecuteToolRequest]) (*connect.Response[v2.ExecuteToolResponse], error)
}

// NewPolykeyServiceClient constructs a client for the polykey.v2.PolykeyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolykeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PolykeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	polykeyServiceMethods := v2.File_polykey_v2_polykey_service_proto.Services().ByName("PolykeyService").Methods()
	return &polykeyServiceClient{
		executeTool: connect.NewClient[v2.ExecuteToolRequest, v2.ExecuteToolResponse](
			httpClient,
			baseURL+PolykeyServiceExecuteToolProcedure,
			connect.WithSchema(polykeyServiceMethods.ByName("ExecuteTool")),
			connect.WithClientOptions(opts...),
		),
	}
}

// polykeyServiceClient implements PolykeyServiceClient.
type polykeyServiceClient struct {
	executeTool *connect.Client[v2.ExecuteToolRequest, v2.ExecuteToolResponse]
}

// ExecuteTool calls polykey.v2.PolykeyService.ExecuteTool.
func (c *polykeyServiceClient) ExecuteTool(ctx context.Context, req *connect.Request[v2.ExecuteToolRequest]) (*connect.Response[v2.ExecuteToolResponse], error) {
	return c.executeTool.CallUnary(ctx, req)
}

// PolykeyServiceHandler is an implementation of the polykey.v2.PolykeyService service.
type PolykeyServiceHandler interface {
	ExecuteTool(context.Context, *connect.Request[v2.ExecuteToolRequest]) (*connect.Response[v2.ExecuteToolResponse], error)
}

// NewPolykeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolykeyServiceHandler(svc PolykeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	polykeyServiceMethods := v2.File_polykey_v2_polykey_service_proto.Services().ByName("PolykeyService").Methods()
	polykeyServiceExecuteToolHandler := connect.NewUnaryHandler(
		PolykeyServiceExecuteToolProcedure,
		svc.ExecuteTool,
		connect.WithSchema(polykeyServiceMethods.ByName("ExecuteTool")),
		connect.WithHandlerOptions(opts...),
	)
	return "/polykey.v2.PolykeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PolykeyServiceExecuteToolProcedure:
			polykeyServiceExecuteToolHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPolykeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolykeyServiceHandler struct{}

func (UnimplementedPolykeyServiceHandler) ExecuteTool(context.Context, *connect.Request[v2.ExecuteToolRequest]) (*connect.Response[v2.ExecuteToolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("polykey.v2.PolykeyService.ExecuteTool is not implemented"))
}
