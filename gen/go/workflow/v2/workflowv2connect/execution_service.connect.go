// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflow/v2/execution_service.proto

package workflowv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/spounge-ai/spounge-proto/gen/go/workflow/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExecutionServiceName is the fully-qualified name of the ExecutionService service.
	ExecutionServiceName = "workflow.v2.ExecutionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExecutionServiceStartExecutionProcedure is the fully-qualified name of the ExecutionService's
	// StartExecution RPC.
	ExecutionServiceStartExecutionProcedure = "/workflow.v2.ExecutionService/StartExecution"
	// ExecutionServiceGetExecutionProcedure is the fully-qualified name of the ExecutionService's
	// GetExecution RPC.
	ExecutionServiceGetExecutionProcedure = "/workflow.v2.ExecutionService/GetExecution"
	// ExecutionServiceListExecutionsProcedure is the fully-qualified name of the ExecutionService's
	// ListExecutions RPC.
	ExecutionServiceListExecutionsProcedure = "/workflow.v2.ExecutionService/ListExecutions"
	// ExecutionServiceCancelExecutionProcedure is the fully-qualified name of the ExecutionService's
	// CancelExecution RPC.
	ExecutionServiceCancelExecutionProcedure = "/workflow.v2.ExecutionService/CancelExecution"
	// ExecutionServiceStreamExecutionProcedure is the fully-qualified name of the ExecutionService's
	// StreamExecution RPC.
	ExecutionServiceStreamExecutionProcedure = "/workflow.v2.ExecutionService/StreamExecution"
)

// ExecutionServiceClient is a client for the workflow.v2.ExecutionService service.
type ExecutionServiceClient interface {
	StartExecution(context.Context, *connect.Request[v2.StartExecutionRequest]) (*connect.Response[v2.StartExecutionResponse], error)
	GetExecution(context.Context, *connect.Request[v2.GetExecutionRequest]) (*connect.Response[v2.GetExecutionResponse], error)
	ListExecutions(context.Context, *connect.Request[v2.ListExecutionsRequest]) (*connect.Response[v2.ListExecutionsResponse], error)
	CancelExecution(context.Context, *connect.Request[v2.CancelExecutionRequest]) (*connect.Response[v2.CancelExecutionResponse], error)
	StreamExecution(context.Context, *connect.Request[v2.StreamExecutionRequest]) (*connect.ServerStreamForClient[v2.StreamExecutionResponse], error)
}

// NewExecutionServiceClient constructs a client for the workflow.v2.ExecutionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExecutionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExecutionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	executionServiceMethods := v2.File_workflow_v2_execution_service_proto.Services().ByName("ExecutionService").Methods()
	return &executionServiceClient{
		startExecution: connect.NewClient[v2.StartExecutionRequest, v2.StartExecutionResponse](
			httpClient,
			baseURL+ExecutionServiceStartExecutionProcedure,
			connect.WithSchema(executionServiceMethods.ByName("StartExecution")),
			connect.WithClientOptions(opts...),
		),
		getExecution: connect.NewClient[v2.GetExecutionRequest, v2.GetExecutionResponse](
			httpClient,
			baseURL+ExecutionServiceGetExecutionProcedure,
			connect.WithSchema(executionServiceMethods.ByName("GetExecution")),
			connect.WithClientOptions(opts...),
		),
		listExecutions: connect.NewClient[v2.ListExecutionsRequest, v2.ListExecutionsResponse](
			httpClient,
			baseURL+ExecutionServiceListExecutionsProcedure,
			connect.WithSchema(executionServiceMethods.ByName("ListExecutions")),
			connect.WithClientOptions(opts...),
		),
		cancelExecution: connect.NewClient[v2.CancelExecutionRequest, v2.CancelExecutionResponse](
			httpClient,
			baseURL+ExecutionServiceCancelExecutionProcedure,
			connect.WithSchema(executionServiceMethods.ByName("CancelExecution")),
			connect.WithClientOptions(opts...),
		),
		streamExecution: connect.NewClient[v2.StreamExecutionRequest, v2.StreamExecutionResponse](
			httpClient,
			baseURL+ExecutionServiceStreamExecutionProcedure,
			connect.WithSchema(executionServiceMethods.ByName("StreamExecution")),
			connect.WithClientOptions(opts...),
		),
	}
}

// executionServiceClient implements ExecutionServiceClient.
type executionServiceClient struct {
	startExecution  *connect.Client[v2.StartExecutionRequest, v2.StartExecutionResponse]
	getExecution    *connect.Client[v2.GetExecutionRequest, v2.GetExecutionResponse]
	listExecutions  *connect.Client[v2.ListExecutionsRequest, v2.ListExecutionsResponse]
	cancelExecution *connect.Client[v2.CancelExecutionRequest, v2.CancelExecutionResponse]
	streamExecution *connect.Client[v2.StreamExecutionRequest, v2.StreamExecutionResponse]
}

// StartExecution calls workflow.v2.ExecutionService.StartExecution.
func (c *executionServiceClient) StartExecution(ctx context.Context, req *connect.Request[v2.StartExecutionRequest]) (*connect.Response[v2.StartExecutionResponse], error) {
	return c.startExecution.CallUnary(ctx, req)
}

// GetExecution calls workflow.v2.ExecutionService.GetExecution.
func (c *executionServiceClient) GetExecution(ctx context.Context, req *connect.Request[v2.GetExecutionRequest]) (*connect.Response[v2.GetExecutionResponse], error) {
	return c.getExecution.CallUnary(ctx, req)
}

// ListExecutions calls workflow.v2.ExecutionService.ListExecutions.
func (c *executionServiceClient) ListExecutions(ctx context.Context, req *connect.Request[v2.ListExecutionsRequest]) (*connect.Response[v2.ListExecutionsResponse], error) {
	return c.listExecutions.CallUnary(ctx, req)
}

// CancelExecution calls workflow.v2.ExecutionService.CancelExecution.
func (c *executionServiceClient) CancelExecution(ctx context.Context, req *connect.Request[v2.CancelExecutionRequest]) (*connect.Response[v2.CancelExecutionResponse], error) {
	return c.cancelExecution.CallUnary(ctx, req)
}

// StreamExecution calls workflow.v2.ExecutionService.StreamExecution.
func (c *executionServiceClient) StreamExecution(ctx context.Context, req *connect.Request[v2.StreamExecutionRequest]) (*connect.ServerStreamForClient[v2.StreamExecutionResponse], error) {
	return c.streamExecution.CallServerStream(ctx, req)
}

// ExecutionServiceHandler is an implementation of the workflow.v2.ExecutionService service.
type ExecutionServiceHandler interface {
	StartExecution(context.Context, *connect.Request[v2.StartExecutionRequest]) (*connect.Response[v2.StartExecutionResponse], error)
	GetExecution(context.Context, *connect.Request[v2.GetExecutionRequest]) (*connect.Response[v2.GetExecutionResponse], error)
	ListExecutions(context.Context, *connect.Request[v2.ListExecutionsRequest]) (*connect.Response[v2.ListExecutionsResponse], error)
	CancelExecution(context.Context, *connect.Request[v2.CancelExecutionRequest]) (*connect.Response[v2.CancelExecutionResponse], error)
	StreamExecution(context.Context, *connect.Request[v2.StreamExecutionRequest], *connect.ServerStream[v2.StreamExecutionResponse]) error
}

// NewExecutionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExecutionServiceHandler(svc ExecutionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	executionServiceMethods := v2.File_workflow_v2_execution_service_proto.Services().ByName("ExecutionService").Methods()
	executionServiceStartExecutionHandler := connect.NewUnaryHandler(
		ExecutionServiceStartExecutionProcedure,
		svc.StartExecution,
		connect.WithSchema(executionServiceMethods.ByName("StartExecution")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceGetExecutionHandler := connect.NewUnaryHandler(
		ExecutionServiceGetExecutionProcedure,
		svc.GetExecution,
		connect.WithSchema(executionServiceMethods.ByName("GetExecution")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceListExecutionsHandler := connect.NewUnaryHandler(
		ExecutionServiceListExecutionsProcedure,
		svc.ListExecutions,
		connect.WithSchema(executionServiceMethods.ByName("ListExecutions")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceCancelExecutionHandler := connect.NewUnaryHandler(
		ExecutionServiceCancelExecutionProcedure,
		svc.CancelExecution,
		connect.WithSchema(executionServiceMethods.ByName("CancelExecution")),
		connect.WithHandlerOptions(opts...),
	)
	executionServiceStreamExecutionHandler := connect.NewServerStreamHandler(
		ExecutionServiceStreamExecutionProcedure,
		svc.StreamExecution,
		connect.WithSchema(executionServiceMethods.ByName("StreamExecution")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workflow.v2.ExecutionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExecutionServiceStartExecutionProcedure:
			executionServiceStartExecutionHandler.ServeHTTP(w, r)
		case ExecutionServiceGetExecutionProcedure:
			executionServiceGetExecutionHandler.ServeHTTP(w, r)
		case ExecutionServiceListExecutionsProcedure:
			executionServiceListExecutionsHandler.ServeHTTP(w, r)
		case ExecutionServiceCancelExecutionProcedure:
			executionServiceCancelExecutionHandler.ServeHTTP(w, r)
		case ExecutionServiceStreamExecutionProcedure:
			executionServiceStreamExecutionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExecutionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExecutionServiceHandler struct{}

func (UnimplementedExecutionServiceHandler) StartExecution(context.Context, *connect.Request[v2.StartExecutionRequest]) (*connect.Response[v2.StartExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v2.ExecutionService.StartExecution is not implemented"))
}

func (UnimplementedExecutionServiceHandler) GetExecution(context.Context, *connect.Request[v2.GetExecutionRequest]) (*connect.Response[v2.GetExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v2.ExecutionService.GetExecution is not implemented"))
}

func (UnimplementedExecutionServiceHandler) ListExecutions(context.Context, *connect.Request[v2.ListExecutionsRequest]) (*connect.Response[v2.ListExecutionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v2.ExecutionService.ListExecutions is not implemented"))
}

func (UnimplementedExecutionServiceHandler) CancelExecution(context.Context, *connect.Request[v2.CancelExecutionRequest]) (*connect.Response[v2.CancelExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v2.ExecutionService.CancelExecution is not implemented"))
}

func (UnimplementedExecutionServiceHandler) StreamExecution(context.Context, *connect.Request[v2.StreamExecutionRequest], *connect.ServerStream[v2.StreamExecutionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v2.ExecutionService.StreamExecution is not implemented"))
}
