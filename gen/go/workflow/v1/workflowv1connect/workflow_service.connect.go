// File: proto/workflow/v1/workflow_service.proto
// Defines the service for the management (CRUD) of WorkflowConfig definitions.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflow/v1/workflow_service.proto

package workflowv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "spounge-proto-gen/workflow/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkflowServiceName is the fully-qualified name of the WorkflowService service.
	WorkflowServiceName = "workflow.v1.WorkflowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkflowServiceCreateWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// CreateWorkflow RPC.
	WorkflowServiceCreateWorkflowProcedure = "/workflow.v1.WorkflowService/CreateWorkflow"
	// WorkflowServiceGetWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// GetWorkflow RPC.
	WorkflowServiceGetWorkflowProcedure = "/workflow.v1.WorkflowService/GetWorkflow"
	// WorkflowServiceUpdateWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// UpdateWorkflow RPC.
	WorkflowServiceUpdateWorkflowProcedure = "/workflow.v1.WorkflowService/UpdateWorkflow"
	// WorkflowServiceDeleteWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// DeleteWorkflow RPC.
	WorkflowServiceDeleteWorkflowProcedure = "/workflow.v1.WorkflowService/DeleteWorkflow"
	// WorkflowServiceListWorkflowsProcedure is the fully-qualified name of the WorkflowService's
	// ListWorkflows RPC.
	WorkflowServiceListWorkflowsProcedure = "/workflow.v1.WorkflowService/ListWorkflows"
	// WorkflowServiceListWorkflowVersionsProcedure is the fully-qualified name of the WorkflowService's
	// ListWorkflowVersions RPC.
	WorkflowServiceListWorkflowVersionsProcedure = "/workflow.v1.WorkflowService/ListWorkflowVersions"
)

// WorkflowServiceClient is a client for the workflow.v1.WorkflowService service.
type WorkflowServiceClient interface {
	CreateWorkflow(context.Context, *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.CreateWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error)
	DeleteWorkflow(context.Context, *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error)
	ListWorkflowVersions(context.Context, *connect.Request[v1.ListWorkflowVersionsRequest]) (*connect.Response[v1.ListWorkflowVersionsResponse], error)
}

// NewWorkflowServiceClient constructs a client for the workflow.v1.WorkflowService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkflowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkflowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workflowServiceMethods := v1.File_workflow_v1_workflow_service_proto.Services().ByName("WorkflowService").Methods()
	return &workflowServiceClient{
		createWorkflow: connect.NewClient[v1.CreateWorkflowRequest, v1.CreateWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceCreateWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("CreateWorkflow")),
			connect.WithClientOptions(opts...),
		),
		getWorkflow: connect.NewClient[v1.GetWorkflowRequest, v1.GetWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceGetWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetWorkflow")),
			connect.WithClientOptions(opts...),
		),
		updateWorkflow: connect.NewClient[v1.UpdateWorkflowRequest, v1.UpdateWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceUpdateWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("UpdateWorkflow")),
			connect.WithClientOptions(opts...),
		),
		deleteWorkflow: connect.NewClient[v1.DeleteWorkflowRequest, v1.DeleteWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceDeleteWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("DeleteWorkflow")),
			connect.WithClientOptions(opts...),
		),
		listWorkflows: connect.NewClient[v1.ListWorkflowsRequest, v1.ListWorkflowsResponse](
			httpClient,
			baseURL+WorkflowServiceListWorkflowsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("ListWorkflows")),
			connect.WithClientOptions(opts...),
		),
		listWorkflowVersions: connect.NewClient[v1.ListWorkflowVersionsRequest, v1.ListWorkflowVersionsResponse](
			httpClient,
			baseURL+WorkflowServiceListWorkflowVersionsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("ListWorkflowVersions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workflowServiceClient implements WorkflowServiceClient.
type workflowServiceClient struct {
	createWorkflow       *connect.Client[v1.CreateWorkflowRequest, v1.CreateWorkflowResponse]
	getWorkflow          *connect.Client[v1.GetWorkflowRequest, v1.GetWorkflowResponse]
	updateWorkflow       *connect.Client[v1.UpdateWorkflowRequest, v1.UpdateWorkflowResponse]
	deleteWorkflow       *connect.Client[v1.DeleteWorkflowRequest, v1.DeleteWorkflowResponse]
	listWorkflows        *connect.Client[v1.ListWorkflowsRequest, v1.ListWorkflowsResponse]
	listWorkflowVersions *connect.Client[v1.ListWorkflowVersionsRequest, v1.ListWorkflowVersionsResponse]
}

// CreateWorkflow calls workflow.v1.WorkflowService.CreateWorkflow.
func (c *workflowServiceClient) CreateWorkflow(ctx context.Context, req *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.CreateWorkflowResponse], error) {
	return c.createWorkflow.CallUnary(ctx, req)
}

// GetWorkflow calls workflow.v1.WorkflowService.GetWorkflow.
func (c *workflowServiceClient) GetWorkflow(ctx context.Context, req *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// UpdateWorkflow calls workflow.v1.WorkflowService.UpdateWorkflow.
func (c *workflowServiceClient) UpdateWorkflow(ctx context.Context, req *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error) {
	return c.updateWorkflow.CallUnary(ctx, req)
}

// DeleteWorkflow calls workflow.v1.WorkflowService.DeleteWorkflow.
func (c *workflowServiceClient) DeleteWorkflow(ctx context.Context, req *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteWorkflowResponse], error) {
	return c.deleteWorkflow.CallUnary(ctx, req)
}

// ListWorkflows calls workflow.v1.WorkflowService.ListWorkflows.
func (c *workflowServiceClient) ListWorkflows(ctx context.Context, req *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error) {
	return c.listWorkflows.CallUnary(ctx, req)
}

// ListWorkflowVersions calls workflow.v1.WorkflowService.ListWorkflowVersions.
func (c *workflowServiceClient) ListWorkflowVersions(ctx context.Context, req *connect.Request[v1.ListWorkflowVersionsRequest]) (*connect.Response[v1.ListWorkflowVersionsResponse], error) {
	return c.listWorkflowVersions.CallUnary(ctx, req)
}

// WorkflowServiceHandler is an implementation of the workflow.v1.WorkflowService service.
type WorkflowServiceHandler interface {
	CreateWorkflow(context.Context, *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.CreateWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error)
	DeleteWorkflow(context.Context, *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error)
	ListWorkflowVersions(context.Context, *connect.Request[v1.ListWorkflowVersionsRequest]) (*connect.Response[v1.ListWorkflowVersionsResponse], error)
}

// NewWorkflowServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkflowServiceHandler(svc WorkflowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workflowServiceMethods := v1.File_workflow_v1_workflow_service_proto.Services().ByName("WorkflowService").Methods()
	workflowServiceCreateWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceCreateWorkflowProcedure,
		svc.CreateWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("CreateWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceGetWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceGetWorkflowProcedure,
		svc.GetWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("GetWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceUpdateWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceUpdateWorkflowProcedure,
		svc.UpdateWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("UpdateWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceDeleteWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceDeleteWorkflowProcedure,
		svc.DeleteWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("DeleteWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceListWorkflowsHandler := connect.NewUnaryHandler(
		WorkflowServiceListWorkflowsProcedure,
		svc.ListWorkflows,
		connect.WithSchema(workflowServiceMethods.ByName("ListWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceListWorkflowVersionsHandler := connect.NewUnaryHandler(
		WorkflowServiceListWorkflowVersionsProcedure,
		svc.ListWorkflowVersions,
		connect.WithSchema(workflowServiceMethods.ByName("ListWorkflowVersions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workflow.v1.WorkflowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkflowServiceCreateWorkflowProcedure:
			workflowServiceCreateWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceGetWorkflowProcedure:
			workflowServiceGetWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceUpdateWorkflowProcedure:
			workflowServiceUpdateWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceDeleteWorkflowProcedure:
			workflowServiceDeleteWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceListWorkflowsProcedure:
			workflowServiceListWorkflowsHandler.ServeHTTP(w, r)
		case WorkflowServiceListWorkflowVersionsProcedure:
			workflowServiceListWorkflowVersionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkflowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkflowServiceHandler struct{}

func (UnimplementedWorkflowServiceHandler) CreateWorkflow(context.Context, *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.CreateWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v1.WorkflowService.CreateWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v1.WorkflowService.GetWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v1.WorkflowService.UpdateWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) DeleteWorkflow(context.Context, *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v1.WorkflowService.DeleteWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v1.WorkflowService.ListWorkflows is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) ListWorkflowVersions(context.Context, *connect.Request[v1.ListWorkflowVersionsRequest]) (*connect.Response[v1.ListWorkflowVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workflow.v1.WorkflowService.ListWorkflowVersions is not implemented"))
}
