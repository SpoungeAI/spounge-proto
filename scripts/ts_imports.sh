#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Source prettier helpers (assuming spounge_prettier.sh is in the same directory)
# This script provides functions like print_section, print_success, print_info.
source "$(dirname "${BASH_SOURCE[0]}")/spounge_prettier.sh"

# Configuration variables
TS_GEN_DIR="gen/ts" # The root directory where generated TypeScript files reside.
TEMP_DIR=$(mktemp -d) # Create a temporary directory for intermediate files.

# Clean up the temporary directory on script exit.
trap "rm -rf $TEMP_DIR" EXIT

# Function to get utility types from a TypeScript file.
# These are common types often generated by protobuf tools (e.g., for partial updates, exact types).
# Arguments:
#   $1: The path to the TypeScript file.
get_utility_types() {
    local file="$1"
    # Grep for export statements that include specific utility type names.
    # `2>/dev/null` suppresses errors if the file doesn't exist or isn't readable.
    # `head -1` takes only the first match.
    # `|| true` prevents the script from exiting if grep finds no matches.
    grep -o "export.*\(DeepPartial\|Exact\|MessageFns\|protobufPackage\)" "$file" 2>/dev/null | head -1 || true
}

# Function to find the first TypeScript file that exports utility types.
# This file will be used as the source for re-exporting these common types from the root index.
find_utility_source() {
    # Find all .ts files within TS_GEN_DIR, excluding index.ts files.
    # Prioritize .ts over .d.ts if both exist, but either can be a source.
    find "$TS_GEN_DIR" -name "*.ts" -not -name "index.ts" | sort | while read -r file; do
        # If the file contains utility types, print its path and return (exit the while loop).
        if get_utility_types "$file" >/dev/null 2>&1; then
            echo "$file"
            return
        fi
    done | head -1 # Take only the first found source.
}

# Function to clean up problematic export statements in index.ts files.
# Some protobuf generators might produce redundant or internal-facing exports
# that should not be exposed at the top level.
# Arguments:
#   $1: The path to the index.ts file to clean.
cleanup_problematic_exports() {
    local file="$1"
    local original_content=$(cat "$file")
    # Remove lines that re-export 'index.js', 'package.js', or 'tsconfig.js'.
    local modified_content=$(echo "$original_content" | grep -vE "export \* from '\.\/\(index\|package\|tsconfig\)\.js';")

    # If the content has changed, update the file and print a success message.
    if [[ "$original_content" != "$modified_content" ]]; then
        echo "$modified_content" > "$file"
        print_success "Cleaned problematic exports from: $file"
    fi
}

# Function to convert a directory name to PascalCase for namespace exports.
# e.g., "auth_gateway" -> "AuthGateway", "v2" -> "V2".
# Arguments:
#   $1: The string to convert.
to_pascal_case() {
    echo "$1" | sed -r 's/(_[a-z])/\U\1/g; s/^_//g; s/^./\U&/'
}

# Function to create or update index.ts files for a given directory.
# These index files act as "barrel files," re-exporting modules from their directory
# and subdirectories, simplifying imports for consumers.
# Arguments:
#   $1: The path to the directory for which to create an index.ts.
create_index() {
    local dir="$1"
    local index_file="$dir/index.ts"
    local temp_index_file="$TEMP_DIR/$(basename "$dir")_index.ts"
    
    # Ensure the temporary file is empty or created before writing to it.
    >"$temp_index_file"

    # 1. Add exports for TypeScript files directly within this directory.
    #    This allows importing types/functions directly from the directory itself.
    find "$dir" -maxdepth 1 -type f -name "*.ts" -not -name "index.ts" | sort | while read -r file; do
        local filename=$(basename "$file" .ts)
        # Check if the file actually contains any exportable content.
        if grep -qE "export (interface|class|type|const|enum|function)" "$file"; then
            echo "export * from './$filename';" >> "$temp_index_file"
        fi
    done

    # 2. Add exports for immediate subdirectories.
    #    Subdirectories are exported as namespaces (e.g., 'export * as V2 from './v2';').
    #    This prevents naming collisions and provides clear organization.
    find "$dir" -maxdepth 1 -type d -not -path "$dir" | sort | while read -r subdir; do
        local sub_basename=$(basename "$subdir")
        # Check if the subdirectory contains an index.ts or any other .ts files,
        # indicating it has content to export.
        if [[ -f "$subdir/index.ts" ]] || find "$subdir" -name "*.ts" | grep -q .; then
            # Convert subdirectory name to PascalCase for the namespace alias.
            local namespace_name=$(to_pascal_case "$sub_basename")
            echo "export * as $namespace_name from './$sub_basename';" >> "$temp_index_file"
        fi
    done

    # Check if the temporary index file has any content.
    if [[ -s "$temp_index_file" ]]; then # -s checks if file exists and has size greater than zero.
        # If content was added, compare it with the existing index file.
        # Update only if there are actual changes to avoid unnecessary file writes.
        if ! cmp -s "$temp_index_file" "$index_file" 2>/dev/null; then
            mv "$temp_index_file" "$index_file"
            print_success "Updated: $index_file"
        else
            print_info "Skipped (no changes): $index_file"
        fi
    else
        # If no content was generated for this index, remove the file if it exists.
        if [[ -f "$index_file" ]]; then
            rm "$index_file"
            print_info "Removed (no content): $index_file"
        fi
    fi
}

# Function to create or update the root index.ts file (e.g., gen/ts/index.ts).
# This is the primary entry point for consumers of the generated TypeScript package.
create_root_index() {
    local root_index_file="$TS_GEN_DIR/index.ts"
    local temp_root_index_file="$TEMP_DIR/root_index.ts"
    
    # Ensure the temporary file is empty or created.
    >"$temp_root_index_file"

    # Only add namespace exports for all immediate subdirectories of the root.
    # This makes top-level modules easily accessible.
    find "$TS_GEN_DIR" -maxdepth 1 -type d -not -path "$TS_GEN_DIR" | sort | while read -r subdir; do
        local sub_basename=$(basename "$subdir")
        # Ensure the subdirectory has an index.ts file to export.
        if [[ -f "$subdir/index.ts" ]]; then
            local namespace_name=$(to_pascal_case "$sub_basename")
            echo "export * as $namespace_name from './$sub_basename';" >> "$temp_root_index_file"
        fi
    done

    # Compare and update the actual root index file.
    if [[ -s "$temp_root_index_file" ]]; then
        if ! cmp -s "$temp_root_index_file" "$root_index_file" 2>/dev/null; then
            mv "$temp_root_index_file" "$root_index_file"
            print_success "Updated: $root_index_file"
        else
            print_info "Skipped (no changes): $root_index_file"
        fi
    else
        if [[ -f "$root_index_file" ]]; then
            rm "$root_index_file"
            print_info "Removed (no content): $root_index_file"
        fi
    fi
}


# --- Main Execution Flow ---

print_section "Generating TypeScript index files..."

print_section "Cleaning up problematic exports..."
# Iterate through all index.ts files and apply cleanup.
find "$TS_GEN_DIR" -name "index.ts" | while read -r file; do
    cleanup_problematic_exports "$file"
done

print_section "Creating intermediate directory indexes..."
# Process directories from deepest to shallowest.
# This order is crucial: inner index.ts files (e.g., v1/common/v1/index.ts)
# must be created before outer ones (e.g., v1/common/index.ts, then v1/index.ts)
# so that parent indexes can correctly reference their child indexes.
find "$TS_GEN_DIR" -type d | sort -r | while read -r dir; do
    # Skip the root generation directory, as it's handled by create_root_index separately.
    if [[ "$dir" == "$TS_GEN_DIR" ]]; then
        continue
    fi
    create_index "$dir"
done

print_section "Creating root index with namespace resolution..."
# Generate the top-level index.ts file.
create_root_index

print_section "Fixing common protobuf issues..."
# Apply sed commands to fix common issues in protobuf-generated TypeScript files.
# These include removing .js extensions from imports/exports and fixing default exports.
find "$TS_GEN_DIR" -name "*.ts" -not -name "index.ts" -exec sed -i.bak -E \
    -e "s/from ['\"](.+)\.js['\"]/from '\1'/g" \
    -e "s/import \* as ([A-Za-z0-9_]+) from '\.\/(.+)\.js';/import * as \1 from '.\/\2';/g" \
    -e "s/export \* from '\.\/(.+)\.js';/export * from '.\/\1';/g" \
    -e "s/export default class ([A-Za-z0-9_]+)/class \1/" \
    -e "s/^(.*)export const protobufPackage = '([^']+)';/\1const protobufPackage = '\2';\nexport { protobufPackage };/" {} +

# Add JSDoc comments to generated index.ts files for better documentation.
find "$TS_GEN_DIR" -name "index.ts" -exec sed -i.bak -E \
    '/export \{ protobufPackage \};/i\
/**\n * @generated File for updating an existing workflow and re-exporting necessary modules. Do not modify manually.\n */' {} +

print_success "TypeScript index files generated successfully"

# Remove backup files created by sed (e.g., .ts.bak).
find "$TS_GEN_DIR" -name "*.bak" -delete
