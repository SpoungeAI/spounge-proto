name: "spounge/proto-ts package release"

on:
  push:
    branches: [ts-release]
    paths:
      - 'proto/**'
      - 'gen/ts/**'
      - 'gen/go/**'
      - '.changeset/**'
      - 'package.json'
 
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.2.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Install npm dependencies
        run: npm ci

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image tag
        id: lower-tag
        run: |
          echo "repo_lower=$(echo 'ghcr.io/${{ github.repository_owner }}/protos-gen' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx builder
        run: |
          docker buildx create --use --name mybuilder --driver docker-container || true
          docker buildx inspect --bootstrap

      - name: Check for pending changesets
        id: changesets
        run: |
          if [[ -n "$(find .changeset -name '*.md' -print -quit)" ]]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Version with Changesets
        if: steps.changesets.outputs.has_changesets == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx changeset version

      - name: Build TS and Go output in Docker (using GHCR image)
        run: |
          IMAGE=${{ steps.lower-tag.outputs.repo_lower }}:cache
          if docker pull "$IMAGE"; then
            echo "Pulled $IMAGE successfully"
          else
            echo "⚠️ Failed to pull $IMAGE - building image locally"
            docker build -t "$IMAGE" .
          fi

          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            "$IMAGE" \
            sh -c "make gen && npm run build"

      - name: Push version bump
        if: steps.changesets.outputs.has_changesets == 'true'
        run: git push --follow-tags

      - name: Publish to npm and create Go module tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd gen/ts
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          if npm view "@spounge/proto-ts@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already published, skipping"
            exit 0
          fi

          npm publish --access public || { echo "Publish failed"; exit 1; }
          cd ../..

          # Tag repo
          if git rev-parse "v$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "Tag v$PACKAGE_VERSION already exists, skipping tag"
          else
            git tag "v$PACKAGE_VERSION"
            git push --tags
          fi

          # Create GitHub release if not exists
          if gh release view "v$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "GitHub release v$PACKAGE_VERSION already exists, skipping"
          else
            gh release create "v$PACKAGE_VERSION" \
              --title "@spounge/proto-ts@$PACKAGE_VERSION" \
              --notes "Release $PACKAGE_VERSION" \
              --latest
          fi