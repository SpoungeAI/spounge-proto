name: Go + TypeScript CI

on:
  push:
    branches: [main, dev, ci]
    paths:
      - 'proto/**'
      - 'gen/go/**'
      - 'gen/ts/**'
      - 'go.mod'
      - 'go.sum'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'Makefile'
      - 'scripts/generate_pb.sh'
      - 'scripts/ts_imports.sh'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [main, dev, ci]
    paths:
      - 'proto/**'
      - 'gen/go/**'
      - 'gen/ts/**'
      - 'go.mod'
      - 'go.sum'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'Makefile'
      - 'scripts/generate_pb.sh'
      - 'scripts/ts_imports.sh'
      - '.github/workflows/build.yml'

jobs:
  lint-proto:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint proto files
        run: buf lint

  build-and-test:
    runs-on: ubuntu-latest
    needs: lint-proto
    steps:
      - uses: actions/checkout@v4

      # Cache Go modules early
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache npm modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install npm deps early for protoc plugin availability
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.2.0'

      - name: Install npm dependencies
        run: npm ci

      # Build protobuf generator Docker image
      - name: Build protobuf generator Docker image
        run: docker build -t spoungeai/protos-gen .

      # --- Now generate protobuf files inside Docker with UID:GID mapping ---
      - name: Generate Go protobuf files (inside Docker)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            --user $(id -u):$(id -g) \
            spoungeai/protos-gen make gen-go

      - name: Generate TypeScript protobuf files (inside Docker)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            --user $(id -u):$(id -g) \
            spoungeai/protos-gen make gen-ts
            
      - name: Run build and tests inside Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            --user $(id -u):$(id -g) \
            spoungeai/protos-gen \
            sh -c "make build && make test && npm run build && npm run compile"

            

      # Optional TS imports
      # - name: Run TypeScript imports script
      #   run: make ts-imports
