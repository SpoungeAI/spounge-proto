name: "Spounge/proto Python Package Release"

on:
  push:
    branches: [python]
    paths:
      - 'proto/**'
      - 'gen/py/**'
      - '.github/workflows/py-release.yml'
      - 'gen/py/pyproject.toml'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image tag
        id: lower-tag
        run: |
          echo "repo_lower=$(echo 'ghcr.io/${{ github.repository_owner }}/protos-gen' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx builder
        run: |
          docker buildx create --use --name mybuilder --driver docker-container || true
          docker buildx inspect --bootstrap

      - name: Build Python protobuf files in Docker (using GHCR image)
        run: |
          IMAGE=${{ steps.lower-tag.outputs.repo_lower }}:cache
          if docker pull "$IMAGE"; then
            echo "Pulled $IMAGE successfully"
          else
            echo "⚠️ Failed to pull $IMAGE - building image locally"
            docker build -t "$IMAGE" .
          fi

          # Run container with same user ID as GitHub Actions runner
          docker run --rm \
            --user $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/app \
            -w /app \
            "$IMAGE" \
            sh -c "make gen-py && make update-py-package"

      - name: Fix ownership of generated files
        run: |
          sudo chown -R $(whoami):$(whoami) gen/py/ || true
          chmod -R u+w gen/py/ || true

      - name: Build Python package
        run: |
          cd gen/py
          python -m build

      - name: Publish to PyPI and create release
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd gen/py
          
          # Get version from pyproject.toml
          PACKAGE_VERSION=$(python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")
          
          # Check if version already exists on PyPI
          if pip index versions spounge-proto-py 2>/dev/null | grep -q "$PACKAGE_VERSION"; then
            echo "Version $PACKAGE_VERSION already published to PyPI, skipping"
            exit 0
          fi

          # Upload to PyPI
          python -m twine upload dist/* || { echo "PyPI upload failed"; exit 1; }
          cd ../..

          # Tag repo
          if git rev-parse "py-v$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "Tag py-v$PACKAGE_VERSION already exists, skipping tag"
          else
            git tag "py-v$PACKAGE_VERSION"
            git push --tags
          fi

          # Create GitHub release if not exists
          if gh release view "py-v$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "GitHub release py-v$PACKAGE_VERSION already exists, skipping"
          else
            gh release create "py-v$PACKAGE_VERSION" \
              --title "spounge-proto-py@$PACKAGE_VERSION" \
              --notes "Python package release $PACKAGE_VERSION" \
              --latest
          fi