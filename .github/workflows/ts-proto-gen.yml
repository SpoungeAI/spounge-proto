name: "@Spounge/proto-ts Release"

on:
  workflow_run:
    workflows: [Dockerized Go & TS Build]
    types: [completed]
    branches: []

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.2.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Version with Changesets (before build)
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx changeset version
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build TS output in Docker (using GHCR image)
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/protos-gen:latest
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            ghcr.io/${{ github.repository_owner }}/protos-gen:latest \
            sh -c "npm run build"

      - name: Commit version bump & changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "chore: version bump [skip ci]"
          fi

      - name: Push version bump
        if: steps.version.outputs.COMMIT_SHA != github.sha
        run: git push --follow-tags

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd gen/ts
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if npm view "@spounge/proto-ts@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already published, skipping"
          else
            npm publish --access public
            cd ../..
            git tag "v$PACKAGE_VERSION"
            git push --tags
            
            # Create GitHub release
            gh release create "v$PACKAGE_VERSION" \
              --title "@spounge/proto-ts@$PACKAGE_VERSION" \
              --notes "Release $PACKAGE_VERSION" \
              --latest
          fi
